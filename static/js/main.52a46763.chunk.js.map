{"version":3,"sources":["serviceWorkerRegistration.js","components/page/layout.jsx","components/pages/contact.jsx","lib/utils/encryption/storage.js","lib/utils/encryption/encrypted-storage.js","lib/contacts/contacts-store.js","lib/contacts/record-contact.js","components/utils/modal.jsx","components/pages/contacts/add-new-contact.jsx","lib/contacts/import-contact-from-string.js","lib/utils/encryption/keys.js","lib/hooks/use-local-forage.js","lib/hooks/use-public-key.js","lib/hooks/use-require-unlock.js","components/pages/contacts/contact-list-item.jsx","components/pages/contacts/ contacts-list.jsx","components/pages/contacts/contacts-store-loader.jsx","components/pages/contacts.jsx","components/setup/generate-private-key.jsx","lib/utils/encryption/generate-keys.js","lib/utils/undetectable/split-string.js","lib/utils/numbers/random-number.js","lib/utils/string/chunk-string.js","lib/hooks/use-encrypted-storage.js","components/pages/home/show-sharable-public-key.js","lib/utils/format/string-to-u8.js","lib/utils/format/keys.js","lib/utils/format/md5.js","lib/utils/actions/copy-to-clipboard.js","components/pages/home.jsx","assets/enigma-logo.jpg","components/page/navigation.jsx","components/config/router.jsx","components/pages/unlock.jsx","lib/hooks/use-query-params.js","app.jsx","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AppLayout","children","className","ContactPage","encryptStorage","EncryptStorage","secret","storage","this","key","data","JSON","stringify","toString","Error","encryptedData","Crypto","encrypt","setItem","a","getItem","decryptedData","decrypt","Utf8","parse","e","removeItem","getItemFromStorage","keyName","setItemInStorage","value","setStoragePin","pin","localforage","loadedFromStorage","contactsStore","createState","contacts","contactRecord","isEmpty","filter","contact","publicKey","undefined","contactIndex","findIndex","get","set","none","map","c","RecordContact","merge","id","name","emailHash","existingContact","find","Object","assign","serializeWithoutId","push","serialize","removeContact","result","Modal","isOpened","close","useEffect","document","body","classList","add","remove","modalContentRef","useRef","useOnClickOutside","ref","AddNewContact","useState","inputPkNameEmail","modalOpened","onClick","preventDefault","onSubmit","str","replace","split","atob","uuidv4","save","importContactFromString","onChange","target","placeholder","type","disabled","useLocalForage","setState","pk","Uint8Array","from","usePublicKey","getPublicKey","useRequireUnlock","history","useHistory","useLocation","isPrivateKeyInitialized","isIdle","useIdle","setTimeout","pathname","ContactListItem","to","destroy","ContactsList","ContactsStoreLoader","setContactsStore","getContactsStore","ContactsPage","isUnlocked","SetupGeneratePrivateKey","setIsPrivateKeyInitialized","confirmMatch","confirmPinValue","emailValue","nameValue","passwordStrength","pinValue","setupPinModal","submitDisabled","keyPair","box","Array","secretKey","toLowerCase","strength","required","s","undetectableSplitString","min","max","len","size","Math","ceil","length","r","offset","i","substr","chunkString","floor","random","join","useEncryptedStorage","ShowSharablePublicKey","readableKey","encodeBase64","formatKeyReadable","email","encodedName","TextEncoder","encode","encodedEmail","cryptoMd5","md5","output","showCopied","text","input","createElement","setAttribute","appendChild","select","execCommand","removeChild","copyToClipboard","HomePage","PageNavigation","src","logo","alt","NavigationItem","Router","UnlockPage","showError","queryParams","URLSearchParams","search","redirectTo","privateKey","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.52a46763.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","export default function AppLayout({children}) {\n  return (\n    <div className=\"p-4\">\n      {children}\n    </div>\n  );\n}","export default function ContactPage({children}) {\n  return (\n    <div>\n      <div>\n        {children}\n      </div>\n\n      <div>\n        ok2\n      </div>\n    </div>\n  );\n}","import * as localforage from 'localforage';\nimport {EncryptStorage} from './encrypted-storage';\nlet encryptStorage;\nwindow.localforage = localforage;\n\nexport function getItemFromStorage(keyName) {\n  if (!encryptStorage) return null;\n  return encryptStorage.decrypt(keyName);\n}\n\nexport function setItemInStorage(keyName, value) {\n  if(!encryptStorage) throw \"Pin not set\"; // eslint-disable-line\n  return encryptStorage.encrypt(keyName, value);\n}\n\nexport function setStoragePin(pin) {\n  encryptStorage = new EncryptStorage(pin, localforage);\n}\n\nexport function disableStorage() {\n  encryptStorage = null;\n}","import * as Crypto from 'crypto-js';\n\nexport class EncryptStorage {\n  constructor(secret, storage) {\n    this.secret = secret;\n    this.storage = storage;\n  }\n\n  encrypt(key, data) {\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    } else if (typeof data === 'number') {\n      data = data.toString();\n    } else if (typeof data !== 'string') {\n      throw new Error('invalid type');\n    }\n    const encryptedData = Crypto.AES.encrypt(data, this.secret);\n    return this.storage.setItem(key, encryptedData.toString());\n  }\n\n  async decrypt(key) {\n    const data = await this.storage.getItem(key);\n    let decryptedData = null;\n    if (data) {\n      decryptedData = (Crypto.AES.decrypt(data, this.secret)).toString(Crypto.enc.Utf8);\n      try {\n        decryptedData = JSON.parse(decryptedData);\n      } catch (e) {}\n    }\n    return decryptedData;\n  }\n\n  remove(key) {\n    return this.storage.removeItem(key);\n  }\n}","import {RecordContact} from './record-contact';\nimport {createState} from '@hookstate/core';\nimport {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {none} from '@hookstate/core';\n\nlet loadedFromStorage;\n\nexport const contactsStore = createState({\n  contacts: [],\n});\n\nexport function saveContact(contactRecord) {\n  getItemFromStorage('contacts').then((contacts) => {\n    if (isEmpty(contacts)) contacts = [];\n\n    const existingContact = contacts.find((c) => {\n      return c.publicKey === contactRecord.publicKey;\n    });\n    if (existingContact) {\n      Object.assign(existingContact, contactRecord.serializeWithoutId());\n      const storeContact = contactsStore.contacts.find((contact) => {\n        return contact.publicKey.get() === contactRecord.publicKey;\n      });\n      storeContact.merge(contactRecord.serializeWithoutId());\n    } else {\n      contactsStore.contacts.merge([contactRecord]);\n      contacts.push(contactRecord.serialize());\n    }\n\n    setItemInStorage('contacts', contacts);\n  });\n}\n\nexport async function removeContact(contactRecord) {\n  let contacts = await getItemFromStorage('contacts');\n  if (isEmpty(contacts)) return;\n  contacts = contacts.filter((contact) => {\n    return contact.publicKey !== contactRecord.publicKey;\n  });\n\n  const contactIndex = contactsStore.contacts.findIndex((contact) => {\n    return contact.publicKey.get() === contactRecord.publicKey;\n  });\n\n  if (contactIndex !== undefined) contactsStore.contacts[contactIndex].set(none);\n\n  await setItemInStorage('contacts', contacts);\n}\n\nexport async function getContactsStore() {\n  if (loadedFromStorage) {\n    return contactsStore;\n  }\n\n  loadedFromStorage = true;\n  let contacts = await getItemFromStorage('contacts');\n\n  contacts = contacts.map((c) => {\n    return new RecordContact(c);\n  });\n\n  contactsStore.merge({contacts});\n\n  return contactsStore;\n}","import {removeContact, saveContact} from './contacts-store';\n\nexport class RecordContact {\n  constructor({id, name, emailHash, publicKey}) {\n    this.id = id;\n    this.name = name;\n    this.emailHash = emailHash;\n    this.publicKey = publicKey;\n  }\n\n  save() {\n    return saveContact(this);\n  }\n\n  destroy() {\n    return removeContact(this);\n  }\n\n  serialize() {\n    return {\n      emailHash: this.emailHash, id: this.id,\n      name: this.name, publicKey: this.publicKey,\n    };\n  }\n\n  serializeWithoutId() {\n    const result = this.serialize();\n    delete result.id;\n    return result;\n  }\n}","import {useEffect, useRef} from 'react';\nimport useOnClickOutside from 'use-onclickoutside';\n\nexport default function Modal({isOpened, close, children}) {\n  useEffect(() => {\n    if (isOpened) {\n      return document.body.classList.add('overflow-y-hidden');\n    } else {\n      return document.body.classList.remove('overflow-y-hidden');\n    }\n  }, [isOpened]);\n  const modalContentRef = useRef(null);\n  useOnClickOutside(modalContentRef, close);\n\n  if (!isOpened) return null;\n\n  return (\n    <>\n      <div className=\"absolute inset-0 bg-gray-500 opacity-70\"/>\n\n      <div className=\"absolute inset-0 items-center py-20 overflow-y-auto\">\n        <div className=\"mb-20 bg-white w-1/3 p-4 rounded shadow mx-auto\" ref={modalContentRef}>\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}","import {importContactFromString} from '../../../lib/contacts/import-contact-from-string';\nimport {isEmpty} from 'lodash';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport function AddNewContact() {\n  const state = useState({\n    inputPkNameEmail: '',\n    modalOpened: false,\n  });\n\n  function closeModal() {\n    state.merge({modalOpened: false});\n  }\n\n  function addNewContact(e) {\n    e.preventDefault();\n    importContactFromString(state.inputPkNameEmail.get());\n    state.merge({\n      inputPkNameEmail: '',\n      modalOpened: false,\n    });\n  }\n\n  function changeInputPkNameEmail(e) {\n    const {value} = e.target;\n    state.merge({inputPkNameEmail: value});\n  }\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalOpened: true});\n  }\n\n  return (\n    <div>\n      <button className=\"bg-black text-white p-3\" onClick={openModal}>\n        + Add new contact\n      </button>\n\n      <Modal isOpened={state.modalOpened.get()} close={closeModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={addNewContact}>\n          <fieldset>\n            <legend>Contact public key, name and email hashed</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"inputPkNameEmail\" value={state.inputPkNameEmail.get()} onChange={changeInputPkNameEmail} placeholder=\"Paste the contact code\" className=\"w-full\"/>\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" disabled={isEmpty(state.inputPkNameEmail.get())}>\n              Add\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {v4 as uuidv4} from 'uuid';\n\nimport {RecordContact} from './record-contact';\n\nexport function importContactFromString(str) {\n  let [publicKey, name, emailHash] = str.replace(/\\s/g, '').split('.');\n  name = atob(name);\n\n  const record = new RecordContact({\n    emailHash, id: uuidv4(), name, publicKey,\n  });\n  record.save();\n}","import {getItemFromStorage} from './storage';\nimport {isEmpty} from 'lodash';\n\nlet privateKey;\nlet publicKey;\n\nexport async function getPrivateKey() {\n  if (!isEmpty(privateKey)) return privateKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return privateKey = Uint8Array.from(pk.secretKey);\n}\n\nexport async function getPublicKey() {\n  if (!isEmpty(publicKey)) return publicKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return publicKey = Uint8Array.from(pk.publicKey);\n}","import * as localforage from 'localforage';\nimport {useEffect, useState} from 'react';\n\nexport function useLocalForage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    localforage.getItem(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    localforage.setItem(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {getPublicKey} from '../utils/encryption/keys';\nimport {useEffect, useState} from 'react';\n\nexport function usePublicKey() {\n  const [state, setState] = useState();\n\n  useEffect(() => {\n    getPublicKey().then((publicKey) => {\n      setState(publicKey);\n    });\n  });\n\n  return state;\n}","import {disableStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useIdle} from 'react-use';\nimport {useLocalForage} from './use-local-forage';\nimport {usePublicKey} from './use-public-key';\n\nexport function useRequireUnlock() {\n  const history = useHistory();\n  const location = useLocation();\n  const publicKey = usePublicKey();\n  const [isPrivateKeyInitialized] = useLocalForage('pk-initialized');\n  const [state, setState] = useState(false);\n  const isIdle = useIdle(120e3);\n\n  useEffect(() => {\n    if (isPrivateKeyInitialized === undefined) return;\n    if (isPrivateKeyInitialized === null) return setState(true);\n\n    if (publicKey) return setState(true);\n\n    setTimeout(() => {\n      history.push(`/unlock?redirectTo=${location.pathname}`);\n    }, 50);\n  }, [isPrivateKeyInitialized, history, publicKey, location, setState, location.pathname]);\n\n  useEffect(() => {\n    if (!publicKey) return;\n    if (!isIdle) return;\n    disableStorage();\n    setTimeout(() => {\n      history.push(`/unlock?redirectTo=${location.pathname}`);\n    }, 50);\n  }, [isIdle, publicKey, history, location.pathname]);\n\n  return state;\n}","import {Link} from 'react-router-dom';\n\nexport default function ContactListItem({contact}) {\n  function destroyContact(e) {\n    e.preventDefault();\n    contact.get().destroy();\n  }\n\n  return (\n    <div className=\"flex flex-wrap justify-between p-2 bg-gray-300 my-2 rounded\">\n      <div>\n        <Link to={`/contacts/${contact.id.get()}`}>\n          {contact.name.get()}\n        </Link>\n      </div>\n\n      <div>\n        <button onClick={destroyContact}>\n          Remove\n        </button>\n      </div>\n    </div>\n  );\n}","import {contactsStore} from '../../../lib/contacts/contacts-store';\nimport {useState} from '@hookstate/core';\nimport ContactListItem from './contact-list-item';\n\nexport default function ContactsList() {\n  const state = useState(contactsStore);\n\n  return (\n    <>\n      {\n        state.contacts.map((contact) => {\n          return (\n            <ContactListItem contact={contact} key={contact.id.get()}/>\n          );\n        })\n      }\n    </>\n  );\n}","import {getContactsStore} from '../../../lib/contacts/contacts-store';\nimport {useEffect, useState} from 'react';\n\nexport default function ContactsStoreLoader({children}) {\n  const [contactsStore, setContactsStore] = useState();\n  useEffect(() => {\n    getContactsStore().then((c) => {\n      setContactsStore(c);\n    });\n  }, [setContactsStore]);\n\n  if (!contactsStore) return null;\n\n  return children;\n}","import {AddNewContact} from './contacts/add-new-contact';\nimport {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\nimport ContactsList from './contacts/ contacts-list';\nimport ContactsStoreLoader from './contacts/contacts-store-loader';\n\nexport default function ContactsPage({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <div>\n      <div>\n        {children}\n      </div>\n\n      {\n        isUnlocked && <div className=\"w-full md:w-1/3 mx-auto pt-4\">\n          <h1 className=\"text-center text-2xl font-bold\">Contacts</h1>\n\n          <div className=\"flex justify-end\">\n            <AddNewContact/>\n          </div>\n\n          <div>\n            <ContactsStoreLoader>\n              <ContactsList/>\n            </ContactsStoreLoader>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}","import {generateKeys} from '../../lib/utils/encryption/generate-keys';\nimport {isEmpty} from 'lodash';\nimport {passwordStrength} from 'check-password-strength';\nimport {setItemInStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport {useState} from '@hookstate/core';\nimport Modal from '../utils/modal';\n\nexport default function SetupGeneratePrivateKey({children}) {\n  const [isPrivateKeyInitialized, setIsPrivateKeyInitialized] = useLocalForage('pk-initialized');\n\n  const state = useState({\n    confirmMatch: true,\n    confirmPinValue: '',\n    emailValue: '',\n    nameValue: '',\n    passwordStrength: 'Too weak',\n    pinValue: '',\n    setupPinModal: false,\n  });\n  function openSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: true});\n  }\n\n  function closeSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: false});\n  }\n\n  function changePinValue(e) {\n    const value = e.target.value;\n    const strength = passwordStrength(value).value;\n    state.merge({\n      passwordStrength: strength,\n      pinValue: e.target.value,\n    });\n  }\n\n  function changeConfirmPinValue(e) {\n    const value = e.target.value;\n\n    state.merge((s) => {\n      return {\n        confirmMatch: value === s.pinValue,\n        confirmPinValue: value,\n      };\n    });\n  }\n\n  function generatePrivateKey(e) {\n    e.preventDefault();\n    const keyPair = generateKeys();\n    setStoragePin(state.pinValue.get());\n    setItemInStorage('key-pair', {\n      publicKey: Array.from(keyPair.publicKey),\n      secretKey: Array.from(keyPair.secretKey),\n    });\n    setItemInStorage('name', state.nameValue.get());\n    setItemInStorage('email', state.emailValue.get().toLowerCase().replace(/\\s/g, ''));\n    setIsPrivateKeyInitialized(true);\n  }\n\n  const submitDisabled = isEmpty(state.pinValue.get()) || state.passwordStrength.get() === 'Too weak' ||\n    isEmpty(state.confirmPinValue.get()) || !state.confirmMatch.get();\n\n  function changeNameValue(e) {\n    state.merge({nameValue: e.target.value});\n  }\n\n  function changeEmailValue(e) {\n    state.merge({emailValue: e.target.value});\n  }\n\n  if (isPrivateKeyInitialized) return children;\n\n  return (\n    <div>\n      <button onClick={openSetupPinModal}>\n        Get started\n      </button>\n\n      <Modal isOpened={state.setupPinModal.get()} close={closeSetupPinModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={generatePrivateKey}>\n          <fieldset>\n            <legend>PIN setup</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"name\" value={state.nameValue.get()} onChange={changeNameValue} placeholder=\"Enter your name\" className=\"w-full\"/>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input type=\"email\" name=\"email\" value={state.emailValue.get()} onChange={changeEmailValue} placeholder=\"Enter email(to have a avatar)\" className=\"w-full\"/>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pin\" value={state.pinValue.get()} onChange={changePinValue} placeholder=\"Enter new PIN\" className=\"w-full\" required/>\n              <span className=\"pure-form-message\">{state.passwordStrength.get()}</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pinConfirm\" value={state.confirmPinValue.get()} onChange={changeConfirmPinValue} placeholder=\"Confirm your pin\" className=\"w-full\" required/>\n              {\n                !state.confirmMatch.get() &&\n                  <span className=\"pure-form-message\">Pins don't match</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={submitDisabled}>\n              Submit\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {box} from 'tweetnacl';\n\nexport function generateKeys() {\n  return box.keyPair();\n}","import {chunkString} from '../string/chunk-string';\nimport {randomNumber} from '../numbers/random-number';\n\nexport function undetectableSplitString(str) {\n  const slices = Math.ceil(randomNumber(3, str.length - 4) / 6);\n\n  return chunkString(str, slices).join(' ');\n}","export function randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","export function chunkString(str, len) {\n  const size = Math.ceil(str.length/len);\n  const r = Array(size);\n  let offset = 0;\n\n  for (let i = 0; i < size; i++) {\n    r[i] = str.substr(offset, len);\n    offset += len;\n  }\n\n  return r;\n}","import {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\n\nexport function useEncryptedStorage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    getItemFromStorage(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    setItemInStorage(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {copyToClipboard} from '../../../lib/utils/actions/copy-to-clipboard';\nimport {encodeBase64} from 'tweetnacl-util';\nimport {formatKeyReadable} from '../../../lib/utils/format/keys';\nimport {md5} from '../../../lib/utils/format/md5';\nimport {stringToU8} from '../../../lib/utils/format/string-to-u8';\nimport {undetectableSplitString} from '../../../lib/utils/undetectable/split-string';\nimport {useEncryptedStorage} from '../../../lib/hooks/use-encrypted-storage';\nimport {usePublicKey} from '../../../lib/hooks/use-public-key';\nimport {useState} from '@hookstate/core';\n\nexport default function ShowSharablePublicKey() {\n  const publicKey = usePublicKey();\n  const readableKey = formatKeyReadable(publicKey);\n  const [name] = useEncryptedStorage('name');\n  const [email] = useEncryptedStorage('email');\n  const encodedName = name ? encodeBase64(stringToU8(name)) : '';\n  const encodedEmail = email ? md5(email) : '';\n  const output = `${readableKey}.${encodedName}.${encodedEmail}`;\n  const state = useState({\n    showCopied: false,\n  });\n\n  if (!readableKey) return null;\n\n  function copyPk(e) {\n    e.preventDefault();\n    const undetectableStr = undetectableSplitString(output);\n    copyToClipboard(undetectableStr);\n    state.merge({showCopied: true});\n\n    setTimeout(() => {\n      state.merge({showCopied: false});\n    }, 1500);\n  }\n\n  return (\n    <div className=\"p-3\">\n      <button className=\"text-center bg-gray-300 hover:bg-gray-200 rounded p-2 border border-solid border-gray-300\" onClick={copyPk}>\n        <div className=\"font-bold\">\n          My public key, name and email hashed\n        </div>\n        <div>\n          {\n            state.showCopied.get() ? 'Copied' : output\n          }\n        </div>\n\n        <div className=\"text-right text-sm\">\n          Click to copy\n        </div>\n      </button>\n    </div>\n  );\n}","export function stringToU8(str) {\n  return new TextEncoder().encode(str);\n}","import {\n  encodeBase64,\n} from 'tweetnacl-util';\nimport {isEmpty} from 'lodash';\n\nexport function formatKeyReadable(key) {\n  if (isEmpty(key)) return;\n\n  return encodeBase64(key);\n}","import {MD5 as cryptoMd5} from 'crypto-js';\n\nexport function md5(str) {\n  return cryptoMd5(str).toString();\n}","export function copyToClipboard(text) {\n  const input = document.createElement('input');\n  input.setAttribute('value', text);\n  document.body.appendChild(input);\n  input.select();\n  const result = document.execCommand('copy');\n  document.body.removeChild(input);\n  return result;\n}","import {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\nimport SetupGeneratePrivateKey from '../setup/generate-private-key';\nimport ShowSharablePublicKey from './home/show-sharable-public-key';\n\nexport default function HomePage({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <>\n      {children}\n\n      {\n        isUnlocked && <SetupGeneratePrivateKey>\n          <div className=\"w-full md:w-1/3 flex justify-center mx-auto\">\n            <ShowSharablePublicKey/>\n          </div>\n        </SetupGeneratePrivateKey>\n      }\n    </>\n  );\n}","export default __webpack_public_path__ + \"static/media/enigma-logo.d8f45653.jpg\";","import {Link} from 'react-router-dom';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function PageNavigation() {\n  return (\n    <>\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"flex flex-wrap justify-center\">\n        <NavigationItem text=\"Home\" to=\"/\"/>\n        <NavigationItem text=\"Contacts\" to=\"/contacts\"/>\n      </div>\n    </>\n  );\n}\n\nfunction NavigationItem({text, to}) {\n  return (\n    <Link to={to}>\n      <button className=\"mx-1 text-center bg-black p-2 rounded text-white\">\n        {text}\n      </button>\n    </Link>\n  );\n}","import {\n  HashRouter,\n} from 'react-router-dom';\n\nexport default function Router({children}) {\n  return (\n    <HashRouter>\n      {children}\n    </HashRouter>\n  );\n}","import {getItemFromStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {useHistory} from 'react-router-dom';\nimport {useQueryParams} from '../../lib/hooks/use-query-params';\nimport {useState} from '@hookstate/core';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function UnlockPage() {\n  const state = useState({pinValue: '', showError: false});\n  const history = useHistory();\n  const queryParams = useQueryParams();\n\n  async function unlock(e) {\n    e.preventDefault();\n    const redirectTo = queryParams.get('redirectTo');\n    setStoragePin(state.pinValue.get());\n\n    try {\n      const privateKey = await getItemFromStorage('key-pair');\n      if (isEmpty(privateKey)) {\n        return state.merge({\n          pinValue: '',\n          showError: true,\n        });\n      }\n\n      state.merge({\n        pinValue: '',\n        showError: false,\n      });\n\n      setTimeout(() => {\n        history.push(redirectTo);\n      }, 50);\n    } catch (e) {\n      return state.merge({\n        pinValue: '',\n        showError: true,\n      });\n    }\n  }\n\n  function updatePinValue(e) {\n    const {value} = e.target;\n    state.merge({pinValue: value});\n  }\n\n  return (\n    <div className=\"w-full md:w-1/3 mx-auto\">\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n\n      <form className=\"pure-form\" onSubmit={unlock}>\n        <fieldset>\n\n          <div className=\"pure-control-group pb-4\">\n            <input type=\"password\" value={state.pinValue.get()} onChange={updatePinValue} className=\"w-full\" placeholder=\"Enter your PIN to continue\"/>\n            {\n              state.showError.get() && <span className=\"pure-form-message text-red-500\">Invalid PIN</span>\n            }\n          </div>\n\n          <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={isEmpty(state.pinValue.get())}>\n            Unlock\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}","import {\n  useLocation,\n} from 'react-router-dom';\n\nexport function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}","import {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport AppLayout from './components/page/layout';\nimport ContactPage from './components/pages/contact';\nimport ContactsPage from './components/pages/contacts';\nimport HomePage from './components/pages/home';\nimport PageNavigation from './components/page/navigation';\nimport Router from './components/config/router';\nimport UnlockPage from './components/pages/unlock';\n\nexport default function App() {\n  return (\n    <Router>\n      <AppLayout>\n        <Switch>\n          <Route path=\"/\" exact>\n            <HomePage>\n              <PageNavigation/>\n            </HomePage>\n          </Route>\n\n          <Route path=\"/unlock\">\n            <UnlockPage/>\n          </Route>\n\n          <Route path=\"/contacts/:id\">\n            <ContactPage>\n              <PageNavigation/>\n            </ContactPage>\n          </Route>\n\n          <Route path=\"/contacts\">\n            <ContactsPage>\n              <PageNavigation/>\n            </ContactsPage>\n          </Route>\n\n          <Route path=\"*\">\n          </Route>\n        </Switch>\n      </AppLayout>\n    </Router>\n  );\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport './tailwind.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}