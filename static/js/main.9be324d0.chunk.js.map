{"version":3,"sources":["serviceWorkerRegistration.js","lib/hooks/use-local-forage.js","lib/utils/encryption/storage.js","lib/utils/encryption/encrypted-storage.js","lib/hooks/use-key-pairs.js","assets/enigma-logo.jpg","components/pages/home/home-page-description.jsx","components/utils/modal.jsx","components/setup/generate-private-key.jsx","lib/utils/encryption/generate-keys.js","components/page/app-setup.jsx","components/page/navigation.jsx","components/page/unlocked.jsx","lib/hooks/use-require-unlock.js","components/page/layout.jsx","components/page/page-title.jsx","lib/contacts/record-contact.js","lib/contacts/contacts-store.js","components/contacts/avatar.jsx","components/pages/contact.jsx","components/pages/contacts/add-new-contact.jsx","lib/contacts/import-contact-from-string.js","components/pages/contacts/contact-list-item.jsx","components/pages/contacts/ contacts-list.jsx","components/pages/contacts/contacts-store-loader.jsx","components/pages/contacts.jsx","lib/utils/undetectable/split-string.js","lib/utils/numbers/random-number.js","lib/utils/string/chunk-string.js","lib/hooks/use-encrypted-storage.js","components/pages/home/show-sharable-public-key.js","lib/utils/format/string-to-u8.js","lib/utils/format/keys.js","lib/utils/format/md5.js","lib/utils/actions/copy-to-clipboard.js","components/pages/home.jsx","components/pages/page-not-found.jsx","components/config/router.jsx","components/pages/unlock.jsx","lib/hooks/use-query-params.js","app.jsx","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","globalState","createState","useLocalForage","keyName","useState","useEffect","undefined","get","localforage","value","merge","outputValue","encryptStorage","EncryptStorage","secret","storage","this","key","data","JSON","stringify","toString","Error","encryptedData","Crypto","encrypt","setItem","a","getItem","decryptedData","decrypt","Utf8","parse","e","removeItem","store","privateKey","publicKey","useKeyPairs","setKeyPair","getItemFromStorage","setItemInStorage","setStoragePin","pin","disableStorage","HomePageDescription","button","children","className","src","logo","alt","Modal","isOpened","close","document","body","classList","add","remove","modalContentRef","useRef","useOnClickOutside","ref","SetupGeneratePrivateKey","setIsPrivateKeyInitialized","confirmMatch","confirmPinValue","emailValue","nameValue","passwordStrength","pinValue","setupPinModal","submitDisabled","isEmpty","onClick","preventDefault","onSubmit","keyPair","box","Array","from","secretKey","toLowerCase","replace","name","onChange","target","placeholder","type","strength","required","length","s","disabled","AppSetup","useLocation","history","useHistory","isPrivateKeyInitialized","initialized","notReady","pathname","push","PageNavigation","NavigationItem","text","to","setTimeout","Unlocked","isUnlocked","setState","isIdle","useIdle","useRequireUnlock","UnlockedRoute","opts","AppLayout","pageTitle","title","buildPageTitle","input","PageTitle","loadedFromStorage","RecordContact","id","emailHash","contactRecord","contacts","existingContact","find","c","Object","assign","serializeWithoutId","contactsStore","contact","serialize","removeContact","result","filter","contactIndex","findIndex","set","none","getContactsStore","map","contactStore","ContactAvatar","height","width","ContactPage","useParams","ready","getContact","AddNewContact","inputPkNameEmail","modalOpened","str","split","atob","uuidv4","save","importContactFromString","ContactListItem","destroy","ContactsList","ContactsStoreLoader","setContactsStore","ContactsPage","undetectableSplitString","min","max","len","size","Math","ceil","r","offset","i","substr","chunkString","floor","random","join","useEncryptedStorage","ShowSharablePublicKey","readableKey","encodeBase64","formatKeyReadable","email","encodedName","TextEncoder","encode","encodedEmail","cryptoMd5","md5","output","showCopied","createElement","setAttribute","appendChild","select","execCommand","removeChild","copyToClipboard","HomePage","PageNotFound","Router","UnlockPage","showError","queryParams","URLSearchParams","search","redirectTo","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9be324d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import * as localforage from 'localforage';\nimport {createState, useState} from '@hookstate/core';\nimport {useEffect} from 'react';\nconst globalState = createState({});\n\nexport function useLocalForage(keyName) {\n  const state = useState(globalState);\n\n  useEffect(() => {\n    if (state[keyName].get() !== undefined) return;\n\n    localforage.getItem(keyName).then((value) => {\n      state.merge({\n        [keyName]: value,\n      });\n    });\n  }, [keyName, state]);\n\n  function setter(value) {\n    state.merge({\n      [keyName]: value,\n    });\n    localforage.setItem(keyName, value);\n  }\n  let outputValue = state[keyName].get();\n  if (outputValue === undefined) {\n    outputValue = 'NOT_READY';\n  }\n\n  return [outputValue, setter];\n}","import * as localforage from 'localforage';\nimport {EncryptStorage} from './encrypted-storage';\nimport {resetKeyPairs} from '../../hooks/use-key-pairs';\nlet encryptStorage;\nwindow.localforage = localforage;\n\nexport function getItemFromStorage(keyName) {\n  if (!encryptStorage) return null;\n  return encryptStorage.decrypt(keyName);\n}\n\nexport function setItemInStorage(keyName, value) {\n  if(!encryptStorage) throw \"Pin not set\"; // eslint-disable-line\n  return encryptStorage.encrypt(keyName, value);\n}\n\nexport function setStoragePin(pin) {\n  encryptStorage = new EncryptStorage(pin, localforage);\n}\n\nexport function disableStorage() {\n  encryptStorage = null;\n  resetKeyPairs();\n}","import * as Crypto from 'crypto-js';\n\nexport class EncryptStorage {\n  constructor(secret, storage) {\n    this.secret = secret;\n    this.storage = storage;\n  }\n\n  encrypt(key, data) {\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    } else if (typeof data === 'number') {\n      data = data.toString();\n    } else if (typeof data !== 'string') {\n      throw new Error('invalid type');\n    }\n    const encryptedData = Crypto.AES.encrypt(data, this.secret);\n    return this.storage.setItem(key, encryptedData.toString());\n  }\n\n  async decrypt(key) {\n    const data = await this.storage.getItem(key);\n    let decryptedData = null;\n    if (data) {\n      decryptedData = (Crypto.AES.decrypt(data, this.secret)).toString(Crypto.enc.Utf8);\n      try {\n        decryptedData = JSON.parse(decryptedData);\n      } catch (e) {}\n    }\n    return decryptedData;\n  }\n\n  remove(key) {\n    return this.storage.removeItem(key);\n  }\n}","import {createState, useState} from '@hookstate/core';\n\nconst store = createState({\n  privateKey: null,\n  publicKey: null,\n});\n\nexport function useKeyPairs() {\n  const state = useState(store);\n\n  return {\n    privateKey: state.privateKey.get(),\n    publicKey: state.publicKey.get(),\n    setKeyPair({publicKey, privateKey}) {\n      store.merge({\n        privateKey, publicKey,\n      });\n    },\n  };\n}\n\nexport function resetKeyPairs() {\n  store.merge({\n    privateKey: null,\n    publicKey: null,\n  });\n}","export default __webpack_public_path__ + \"static/media/enigma-logo.d8f45653.jpg\";","import logo from '../../../assets/enigma-logo.jpg';\n\nexport default function HomePageDescription({children: button}) {\n  return (\n    <div>\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"py-2\">\n        {button}\n      </div>\n\n      <div className=\"flex\">\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"font-bold text-3xl\">\n            Engima R3loaded\n          </div>\n\n          <div>\n            DIY Encrypt and decrypt messages and files\n          </div>\n          <div>\n            Don't trust \"words\" such as privacy, encryption, safety etc, coming from platforms which monetize your data. Only Mathematics and control can be trusted\n          </div>\n          <div>\n            Open source\n          </div>\n          <div>\n            No server or internet needed, 100% offline support\n          </div>\n          <div>\n            Works with any service such as: <b>Messenger, Signal, Slack, Whatsapp, Twitter, Instagram DM, SMS etc</b>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import {useEffect, useRef} from 'react';\nimport useOnClickOutside from 'use-onclickoutside';\n\nexport default function Modal({isOpened, close, children}) {\n  useEffect(() => {\n    if (isOpened) {\n      return document.body.classList.add('overflow-y-hidden');\n    } else {\n      return document.body.classList.remove('overflow-y-hidden');\n    }\n  }, [isOpened]);\n  const modalContentRef = useRef(null);\n  useOnClickOutside(modalContentRef, close);\n\n  if (!isOpened) return null;\n\n  return (\n    <>\n      <div className=\"absolute inset-0 bg-gray-500 opacity-70\"/>\n\n      <div className=\"absolute inset-0 items-center py-20 overflow-y-auto\">\n        <div className=\"mb-20 bg-white w-1/3 p-4 rounded shadow mx-auto\" ref={modalContentRef}>\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}","import {generateKeys} from '../../lib/utils/encryption/generate-keys';\nimport {isEmpty} from 'lodash';\nimport {passwordStrength} from 'check-password-strength';\nimport {setItemInStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport {useState} from '@hookstate/core';\nimport HomePageDescription from '../pages/home/home-page-description';\nimport Modal from '../utils/modal';\n\nexport default function SetupGeneratePrivateKey() {\n  const [_, setIsPrivateKeyInitialized] = useLocalForage('pk-initialized'); // eslint-disable-line no-unused-vars\n\n  const state = useState({\n    confirmMatch: true,\n    confirmPinValue: '',\n    emailValue: '',\n    nameValue: '',\n    passwordStrength: 'Too weak',\n    pinValue: '',\n    setupPinModal: false,\n  });\n  function openSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: true});\n  }\n\n  function closeSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: false});\n  }\n\n  function changePinValue(e) {\n    const value = e.target.value;\n    const strength = passwordStrength(value).value;\n    state.merge({\n      passwordStrength: strength,\n      pinValue: e.target.value,\n    });\n  }\n\n  function changeConfirmPinValue(e) {\n    const value = e.target.value;\n\n    state.merge((s) => {\n      return {\n        confirmMatch: value === s.pinValue,\n        confirmPinValue: value,\n      };\n    });\n  }\n\n  function generatePrivateKey(e) {\n    e.preventDefault();\n    const keyPair = generateKeys();\n    setStoragePin(state.pinValue.get());\n    setItemInStorage('key-pair', {\n      publicKey: Array.from(keyPair.publicKey),\n      secretKey: Array.from(keyPair.secretKey),\n    });\n    setItemInStorage('name', state.nameValue.get());\n    setItemInStorage('email', state.emailValue.get().toLowerCase().replace(/\\s/g, ''));\n    setIsPrivateKeyInitialized(true);\n  }\n\n  const submitDisabled = isEmpty(state.pinValue.get()) || state.passwordStrength.get() === 'Too weak' ||\n    isEmpty(state.confirmPinValue.get()) || !state.confirmMatch.get();\n\n  function changeNameValue(e) {\n    state.merge({nameValue: e.target.value});\n  }\n\n  function changeEmailValue(e) {\n    state.merge({emailValue: e.target.value});\n  }\n\n  return (\n    <div>\n      <HomePageDescription>\n        <div className=\"flex justify-center\">\n          <button onClick={openSetupPinModal} className=\"bg-black text-white text-4xl rounded p-2\">\n            Get started\n          </button>\n        </div>\n      </HomePageDescription>\n\n      <Modal isOpened={state.setupPinModal.get()} close={closeSetupPinModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={generatePrivateKey}>\n          <fieldset>\n            <legend>PIN setup</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"name\" value={state.nameValue.get()} onChange={changeNameValue} placeholder=\"Enter your name\" className=\"w-full\"/>\n              <span className=\"pure-form-message\">Optional</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input type=\"email\" name=\"email\" value={state.emailValue.get()} onChange={changeEmailValue} placeholder=\"Your email to have a avatar from gravatar.com\" className=\"w-full\"/>\n              <span className=\"pure-form-message\">Optional</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pin\" value={state.pinValue.get()} onChange={changePinValue} placeholder=\"Enter new PIN\" className=\"w-full\" required/>\n              {\n                state.pinValue.get().length > 0 &&\n                 <span className=\"pure-form-message\">{state.passwordStrength.get()}</span>\n              }\n              <span className=\"pure-form-message\">You can't recover or change the PIN later. <span className=\"underline\">Make sure you remember it and keep it secret</span></span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pinConfirm\" value={state.confirmPinValue.get()} onChange={changeConfirmPinValue}\n                placeholder=\"Confirm your PIN\"\n                className=\"w-full\"\n                required/>\n              {\n                !state.confirmMatch.get() &&\n                  <span className=\"pure-form-message text-red-500\">Pins don't match</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={submitDisabled}>\n              Submit\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {box} from 'tweetnacl';\n\nexport function generateKeys() {\n  return box.keyPair();\n}","import {useEffect} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport SetupGeneratePrivateKey from '../setup/generate-private-key';\n\nexport function AppSetup({children}) {\n  const location = useLocation();\n  const history = useHistory();\n  const [isPrivateKeyInitialized] = useLocalForage('pk-initialized');\n  const initialized = isPrivateKeyInitialized !== null;\n  const notReady = isPrivateKeyInitialized === 'NOT_READY';\n\n  useEffect(() => {\n    if (notReady) return;\n    if (!initialized && location.pathname !== '/') {\n      history.push('/');\n    }\n  }, [location, history, notReady, initialized]);\n\n  if (notReady) return null;\n  if (initialized) return children;\n\n  return (\n    <SetupGeneratePrivateKey/>\n  );\n}","import {Link, useHistory} from 'react-router-dom';\nimport {disableStorage} from '../../lib/utils/encryption/storage';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function PageNavigation() {\n  const history = useHistory();\n\n  function lock(e) {\n    e.preventDefault();\n    history.push(`/unlock`);\n    setTimeout(disableStorage, 50);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"flex flex-wrap justify-center pt-2\">\n        <NavigationItem text=\"Home\" to=\"/\"/>\n        <NavigationItem text=\"Contacts\" to=\"/contacts\"/>\n        <div className=\"pl-3\">\n          <button className=\"mx-1 text-center bg-black p-2 rounded text-white\" onClick={lock}>\n            Lock\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction NavigationItem({text, to}) {\n  return (\n    <Link to={to}>\n      <button className=\"mx-1 text-center bg-black p-2 rounded text-white\">\n        {text}\n      </button>\n    </Link>\n  );\n}","import {AppSetup} from './app-setup';\nimport {Route} from 'react-router-dom';\nimport {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\nimport PageNavigation from './navigation';\n\nexport default function Unlocked({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <div>\n      <div>\n        <PageNavigation/>\n      </div>\n      {\n        isUnlocked && <div>\n          {children}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport function UnlockedRoute({children, ...opts}) {\n  return (\n    <Route {...opts}>\n      <AppSetup>\n        <Unlocked>\n          {children}\n        </Unlocked>\n      </AppSetup>\n    </Route>\n  );\n}","import {disableStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useIdle} from 'react-use';\nimport {useKeyPairs} from './use-key-pairs';\n\nexport function useRequireUnlock() {\n  const history = useHistory();\n  const location = useLocation();\n  const {publicKey} = useKeyPairs();\n  const [state, setState] = useState(false);\n  const isIdle = useIdle(120e3);\n\n  useEffect(() => {\n    if (!publicKey) {\n      return history.push(`/unlock?redirectTo=${location.pathname}`);\n    }\n    setState(true);\n  }, [publicKey, setState, history, location]);\n\n  useEffect(() => {\n    if (!publicKey) return;\n    if (!isIdle) return;\n    history.push(`/unlock?redirectTo=${location.pathname}`);\n    setTimeout(disableStorage, 50);\n  }, [isIdle, publicKey, history, location.pathname]);\n\n  return state;\n}","export default function AppLayout({children}) {\n  return (\n    <div className=\"p-4\">\n      {children}\n    </div>\n  );\n}","import {Helmet, HelmetProvider} from 'react-helmet-async';\nconst pageTitle = document.title;\n\nexport function buildPageTitle(input) {\n  if (!input) return pageTitle;\n\n  return `${input} ${pageTitle}`;\n}\n\nexport default function PageTitle({children}) {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{pageTitle}</title>\n      </Helmet>\n      {children}\n    </HelmetProvider>\n  );\n}","import {removeContact, saveContact} from './contacts-store';\n\nexport class RecordContact {\n  constructor({id, name, emailHash, publicKey}) {\n    this.id = id;\n    this.name = name;\n    this.emailHash = emailHash;\n    this.publicKey = publicKey;\n  }\n\n  save() {\n    return saveContact(this);\n  }\n\n  destroy() {\n    return removeContact(this);\n  }\n\n  serialize() {\n    return {\n      emailHash: this.emailHash, id: this.id,\n      name: this.name, publicKey: this.publicKey,\n    };\n  }\n\n  serializeWithoutId() {\n    const result = this.serialize();\n    delete result.id;\n    return result;\n  }\n}","import {RecordContact} from './record-contact';\nimport {createState} from '@hookstate/core';\nimport {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {none} from '@hookstate/core';\n\nlet loadedFromStorage;\n\nexport const contactsStore = createState({\n  contacts: [],\n});\n\nexport function saveContact(contactRecord) {\n  getItemFromStorage('contacts').then((contacts) => {\n    if (isEmpty(contacts)) contacts = [];\n\n    const existingContact = contacts.find((c) => {\n      return c.publicKey === contactRecord.publicKey;\n    });\n    if (existingContact) {\n      Object.assign(existingContact, contactRecord.serializeWithoutId());\n      const storeContact = contactsStore.contacts.find((contact) => {\n        return contact.publicKey.get() === contactRecord.publicKey;\n      });\n      storeContact.merge(contactRecord.serializeWithoutId());\n    } else {\n      contactsStore.contacts.merge([contactRecord]);\n      contacts.push(contactRecord.serialize());\n    }\n\n    setItemInStorage('contacts', contacts);\n  });\n}\n\nexport async function removeContact(contactRecord) {\n  let contacts = await getItemFromStorage('contacts');\n  if (isEmpty(contacts)) return;\n  contacts = contacts.filter((contact) => {\n    return contact.publicKey !== contactRecord.publicKey;\n  });\n\n  const contactIndex = contactsStore.contacts.findIndex((contact) => {\n    return contact.publicKey.get() === contactRecord.publicKey;\n  });\n\n  if (contactIndex !== undefined) contactsStore.contacts[contactIndex].set(none);\n\n  await setItemInStorage('contacts', contacts);\n}\n\nexport async function getContactsStore() {\n  if (loadedFromStorage) {\n    return contactsStore;\n  }\n\n  loadedFromStorage = true;\n  let contacts = await getItemFromStorage('contacts');\n  if (isEmpty(contacts)) return contactsStore;\n\n  contacts = contacts.map((c) => {\n    return new RecordContact(c);\n  });\n\n  contactsStore.merge({contacts});\n\n  return contactsStore;\n}\n\nexport async function getContact(id) {\n  const contactStore = await getContactsStore();\n\n  return contactStore.contacts.find((contact) => {\n    return contact.id.get() === id;\n  });\n}","export default function ContactAvatar({contact, height, width}) {\n  const src = `http://www.gravatar.com/avatar/${contact.emailHash.get()}`;\n\n  return (\n    <img src={src} className={`rounded-full ${height} ${width}`}/>\n  );\n}","import {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport {getContact} from '../../lib/contacts/contacts-store';\nimport {useEffect, useState} from 'react';\nimport {useParams} from 'react-router-dom';\nimport ContactAvatar from '../contacts/avatar';\n\nexport default function ContactPage() {\n  const {id} = useParams();\n  const [state, setState] = useState({\n    contact: null,\n    ready: false,\n  });\n\n  useEffect(() => {\n    getContact(id).then((contact) => {\n      setState((s) => {\n        return {\n          ...s,\n          contact,\n          ready: true,\n        };\n      });\n    });\n  }, [id, setState]);\n\n  const {contact, ready} = state;\n\n  if (!contact && !ready) return null;\n\n  if (!contact) {\n    return (\n      <>\n        <Helmet>\n          <title>{buildPageTitle('Contact not found')}</title>\n        </Helmet>\n        <div>\n          Contact not found\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle(contact.name.get())}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto\">\n        <div>\n          <div className=\"flex justify-center pb-2\">\n            <ContactAvatar contact={contact} height=\"h-20\" width=\"w-20\"/>\n          </div>\n          <h1 className=\"text-center\">{contact.name.get()}</h1>\n        </div>\n      </div>\n    </>\n  );\n}","import {importContactFromString} from '../../../lib/contacts/import-contact-from-string';\nimport {isEmpty} from 'lodash';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport function AddNewContact() {\n  const state = useState({\n    inputPkNameEmail: '',\n    modalOpened: false,\n  });\n\n  function closeModal() {\n    state.merge({modalOpened: false});\n  }\n\n  function addNewContact(e) {\n    e.preventDefault();\n    importContactFromString(state.inputPkNameEmail.get());\n    state.merge({\n      inputPkNameEmail: '',\n      modalOpened: false,\n    });\n  }\n\n  function changeInputPkNameEmail(e) {\n    const {value} = e.target;\n    state.merge({inputPkNameEmail: value});\n  }\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalOpened: true});\n  }\n\n  return (\n    <div>\n      <button className=\"bg-black text-white p-3\" onClick={openModal}>\n        + Add new contact\n      </button>\n\n      <Modal isOpened={state.modalOpened.get()} close={closeModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={addNewContact}>\n          <fieldset>\n            <legend>Contact public key, name and email hashed</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"inputPkNameEmail\" value={state.inputPkNameEmail.get()} onChange={changeInputPkNameEmail} placeholder=\"Paste the contact code\" className=\"w-full\"/>\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" disabled={isEmpty(state.inputPkNameEmail.get())}>\n              Add\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {v4 as uuidv4} from 'uuid';\n\nimport {RecordContact} from './record-contact';\n\nexport function importContactFromString(str) {\n  let [publicKey, name, emailHash] = str.replace(/\\s/g, '').split('.');\n  name = atob(name);\n\n  const record = new RecordContact({\n    emailHash, id: uuidv4(), name, publicKey,\n  });\n  record.save();\n}","import {Link} from 'react-router-dom';\nimport ContactAvatar from '../../contacts/avatar';\n\nexport default function ContactListItem({contact}) {\n  function destroyContact(e) {\n    e.preventDefault();\n    contact.get().destroy();\n  }\n\n  return (\n    <div className=\"flex flex-wrap items-center justify-between p-2 bg-gray-300 my-2 rounded\">\n      <div>\n        <Link to={`/contacts/${contact.id.get()}`}>\n          <div className=\"flex items-center\">\n            <ContactAvatar contact={contact} height=\"h-20\" width=\"w-20\"/>\n            <span className=\"pl-2\">\n              {contact.name.get()}\n            </span>\n          </div>\n        </Link>\n      </div>\n\n      <div>\n        <button onClick={destroyContact}>\n          Remove\n        </button>\n      </div>\n    </div>\n  );\n}","import {contactsStore} from '../../../lib/contacts/contacts-store';\nimport {useState} from '@hookstate/core';\nimport ContactListItem from './contact-list-item';\n\nexport default function ContactsList() {\n  const state = useState(contactsStore);\n\n  return (\n    <>\n      {\n        state.contacts.map((contact) => {\n          return (\n            <ContactListItem contact={contact} key={contact.id.get()}/>\n          );\n        })\n      }\n    </>\n  );\n}","import {getContactsStore} from '../../../lib/contacts/contacts-store';\nimport {useEffect, useState} from 'react';\n\nexport default function ContactsStoreLoader({children}) {\n  const [contactsStore, setContactsStore] = useState();\n  useEffect(() => {\n    getContactsStore().then((c) => {\n      setContactsStore(c);\n    });\n  }, [setContactsStore]);\n\n  if (!contactsStore) return null;\n\n  return children;\n}","import {AddNewContact} from './contacts/add-new-contact';\nimport {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport ContactsList from './contacts/ contacts-list';\nimport ContactsStoreLoader from './contacts/contacts-store-loader';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle('Contacts')}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto pt-4\">\n        <h1 className=\"text-center text-2xl font-bold\">Contacts</h1>\n\n        <div className=\"flex justify-end\">\n          <AddNewContact/>\n        </div>\n\n        <div>\n          <ContactsStoreLoader>\n            <ContactsList/>\n          </ContactsStoreLoader>\n        </div>\n      </div>\n    </>\n  );\n}","import {chunkString} from '../string/chunk-string';\nimport {randomNumber} from '../numbers/random-number';\n\nexport function undetectableSplitString(str) {\n  const slices = Math.ceil(randomNumber(3, str.length - 4) / 6);\n\n  return chunkString(str, slices).join(' ');\n}","export function randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","export function chunkString(str, len) {\n  const size = Math.ceil(str.length/len);\n  const r = Array(size);\n  let offset = 0;\n\n  for (let i = 0; i < size; i++) {\n    r[i] = str.substr(offset, len);\n    offset += len;\n  }\n\n  return r;\n}","import {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\n\nexport function useEncryptedStorage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    getItemFromStorage(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    setItemInStorage(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {copyToClipboard} from '../../../lib/utils/actions/copy-to-clipboard';\nimport {encodeBase64} from 'tweetnacl-util';\nimport {formatKeyReadable} from '../../../lib/utils/format/keys';\nimport {md5} from '../../../lib/utils/format/md5';\nimport {stringToU8} from '../../../lib/utils/format/string-to-u8';\nimport {undetectableSplitString} from '../../../lib/utils/undetectable/split-string';\nimport {useEncryptedStorage} from '../../../lib/hooks/use-encrypted-storage';\nimport {useKeyPairs} from '../../../lib/hooks/use-key-pairs';\nimport {useState} from '@hookstate/core';\n\nexport default function ShowSharablePublicKey() {\n  const {publicKey} = useKeyPairs();\n  const readableKey = formatKeyReadable(publicKey);\n  const [name] = useEncryptedStorage('name');\n  const [email] = useEncryptedStorage('email');\n  const encodedName = name ? encodeBase64(stringToU8(name)) : '';\n  const encodedEmail = email ? md5(email) : '';\n  const output = `${readableKey}.${encodedName}.${encodedEmail}`;\n  const state = useState({\n    showCopied: false,\n  });\n\n  if (!readableKey) return null;\n  if (!name || !email) return null;\n\n  function copyPk(e) {\n    e.preventDefault();\n    const undetectableStr = undetectableSplitString(output);\n    copyToClipboard(undetectableStr);\n    state.merge({showCopied: true});\n\n    setTimeout(() => {\n      state.merge({showCopied: false});\n    }, 1500);\n  }\n\n  return (\n    <div className=\"p-3\">\n      <button className=\"text-center bg-gray-300 hover:bg-gray-200 rounded p-2 border border-solid border-gray-300\" onClick={copyPk}>\n        <div className=\"font-bold\">\n          My public key, name and email hashed\n        </div>\n        <div>\n          {\n            state.showCopied.get() ? 'Copied' : output\n          }\n        </div>\n\n        <div className=\"text-right text-sm\">\n          Click to copy\n        </div>\n      </button>\n    </div>\n  );\n}","export function stringToU8(str) {\n  return new TextEncoder().encode(str);\n}","import {\n  encodeBase64,\n} from 'tweetnacl-util';\nimport {isEmpty} from 'lodash';\n\nexport function formatKeyReadable(key) {\n  if (isEmpty(key)) return;\n\n  return encodeBase64(key);\n}","import {MD5 as cryptoMd5} from 'crypto-js';\n\nexport function md5(str) {\n  return cryptoMd5(str).toString();\n}","export function copyToClipboard(text) {\n  const input = document.createElement('input');\n  input.setAttribute('value', text);\n  document.body.appendChild(input);\n  input.select();\n  const result = document.execCommand('copy');\n  document.body.removeChild(input);\n  return result;\n}","import {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport ShowSharablePublicKey from './home/show-sharable-public-key';\n\nexport default function HomePage() {\n  return (<>\n    <Helmet>\n      <title>{buildPageTitle('Home')}</title>\n    </Helmet>\n    <div className=\"flex justify-center\">\n      <ShowSharablePublicKey/>\n    </div>\n  </>);\n}","export default function PageNotFound() {\n  return (\n    <div className=\"text-center text-3xl font-bold\">\n      Page not found\n    </div>\n  );\n}","import {\n  HashRouter,\n} from 'react-router-dom';\n\nexport default function Router({children}) {\n  return (\n    <HashRouter>\n      {children}\n    </HashRouter>\n  );\n}","import {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport {getItemFromStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {useHistory} from 'react-router-dom';\nimport {useKeyPairs} from '../../lib/hooks/use-key-pairs';\nimport {useQueryParams} from '../../lib/hooks/use-query-params';\nimport {useState} from '@hookstate/core';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function UnlockPage() {\n  const state = useState({pinValue: '', showError: false});\n  const history = useHistory();\n  const queryParams = useQueryParams();\n  const {setKeyPair} = useKeyPairs();\n\n  async function unlock(e) {\n    e.preventDefault();\n    const redirectTo = queryParams.get('redirectTo') || '/';\n    setStoragePin(state.pinValue.get());\n\n    try {\n      const keyPair = await getItemFromStorage('key-pair');\n      if (isEmpty(keyPair)) {\n        return state.merge({\n          pinValue: '',\n          showError: true,\n        });\n      }\n      setKeyPair(keyPair);\n\n      history.push(redirectTo);\n    } catch (e) {\n      return state.merge({\n        pinValue: '',\n        showError: true,\n      });\n    }\n  }\n\n  function updatePinValue(e) {\n    const {value} = e.target;\n    state.merge({pinValue: value});\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle('Unlock')}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto\">\n        <div className=\"flex justify-center\">\n          <img src={logo} alt=\"enigma\"/>\n        </div>\n\n        <form className=\"pure-form\" onSubmit={unlock}>\n          <fieldset>\n\n            <div className=\"pure-control-group pb-4\">\n              <input type=\"password\" value={state.pinValue.get()} onChange={updatePinValue} className=\"w-full\" placeholder=\"Enter your PIN to continue\"/>\n              {\n                state.showError.get() && <span className=\"pure-form-message text-red-500\">Invalid PIN</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={isEmpty(state.pinValue.get())}>\n              Unlock\n            </button>\n          </fieldset>\n        </form>\n      </div>\n    </>\n  );\n}","import {\n  useLocation,\n} from 'react-router-dom';\n\nexport function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}","import {AppSetup} from './components/page/app-setup';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {UnlockedRoute} from './components/page/unlocked';\nimport AppLayout from './components/page/layout';\nimport ContactPage from './components/pages/contact';\nimport ContactsPage from './components/pages/contacts';\nimport HomePage from './components/pages/home';\nimport PageNotFound from './components/pages/page-not-found';\nimport PageTitle from './components/page/page-title';\nimport Router from './components/config/router';\nimport UnlockPage from './components/pages/unlock';\n\nexport default function App() {\n  return (\n    <PageTitle>\n      <Router>\n        <AppLayout>\n          <Switch>\n            <UnlockedRoute path=\"/\" exact>\n              <HomePage/>\n            </UnlockedRoute>\n\n            <UnlockedRoute path=\"/contacts/:id\">\n              <ContactPage/>\n            </UnlockedRoute>\n\n            <UnlockedRoute path=\"/contacts\">\n              <ContactsPage/>\n            </UnlockedRoute>\n\n            <Route path=\"/unlock\">\n              <AppSetup>\n                <UnlockPage/>\n              </AppSetup>\n            </Route>\n\n            <Route path=\"*\">\n              <PageNotFound/>\n            </Route>\n          </Switch>\n        </AppLayout>\n      </Router>\n    </PageTitle>\n  );\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport './tailwind.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}