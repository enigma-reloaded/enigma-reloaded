{"version":3,"sources":["serviceWorkerRegistration.js","lib/hooks/use-local-forage.js","lib/utils/encryption/storage.js","lib/utils/encryption/encrypted-storage.js","lib/hooks/use-key-pairs.js","assets/enigma-logo.jpg","components/pages/home/home-page-description.jsx","components/utils/modal.jsx","components/setup/generate-private-key.jsx","lib/utils/encryption/generate-keys.js","components/page/app-setup.jsx","components/page/navigation.jsx","components/page/unlocked.jsx","lib/hooks/use-require-unlock.js","components/page/layout.jsx","components/page/page-title.jsx","lib/utils/actions/copy-to-clipboard.js","lib/feedback/success.js","lib/utils/undetectable/split-string.js","lib/utils/numbers/random-number.js","lib/private-messages/private-message-record.js","lib/private-messages/private-messages-store.js","lib/contacts/record-contact.js","lib/contacts/contacts-store.js","components/contacts/avatar.jsx","lib/utils/encryption/keys.js","lib/utils/undetectable/format-to-base-64-undetectable.js","lib/utils/encryption/encrypt-message.js","components/pages/contact/create-new-private-message.jsx","lib/utils/undetectable/decode-base-64-undetectable.js","lib/utils/encryption/decrypt-message.js","lib/feedback/error.js","components/pages/contact/decode-new-private-message.jsx","lib/utils/encryption/decrypt-file.js","lib/utils/files/download-file.js","components/pages/contact/decrypt-file.jsx","lib/utils/encryption/encrypt-file.js","components/pages/contact/encrypt-file.jsx","lib/utils/string/merge-styles.js","components/pages/contact/message.jsx","components/pages/contact/private-messages.jsx","components/pages/contact/public-messages.jsx","components/pages/contact.jsx","components/pages/contacts/add-new-contact.jsx","lib/contacts/import-contact-from-string.js","components/pages/contacts/contact-list-item.jsx","components/pages/contacts/ contacts-list.jsx","components/pages/contacts/contacts-store-loader.jsx","components/pages/contacts.jsx","lib/hooks/use-encrypted-storage.js","components/pages/home/show-sharable-public-key.js","lib/utils/format/string-to-u8.js","lib/utils/format/keys.js","lib/utils/format/md5.js","components/pages/home.jsx","components/pages/page-not-found.jsx","components/config/router.jsx","components/pages/unlock.jsx","lib/hooks/use-query-params.js","app.jsx","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","globalState","createState","useLocalForage","keyName","useState","useEffect","undefined","get","localforage","value","merge","outputValue","encryptStorage","EncryptStorage","secret","storage","this","key","data","JSON","stringify","toString","Error","encryptedData","Crypto","encrypt","setItem","a","getItem","decryptedData","decrypt","Utf8","parse","e","removeItem","store","privateKey","publicKey","useKeyPairs","setKeyPair","getItemFromStorage","setItemInStorage","setStoragePin","pin","disableStorage","HomePageDescription","button","children","className","src","logo","alt","Modal","isOpened","close","document","body","classList","add","remove","modalContentRef","useRef","useOnClickOutside","ref","SetupGeneratePrivateKey","setIsPrivateKeyInitialized","confirmMatch","confirmPinValue","emailValue","nameValue","passwordStrength","pinValue","setupPinModal","submitDisabled","isEmpty","onClick","preventDefault","onSubmit","keyPair","box","Array","from","secretKey","toLowerCase","replace","name","onChange","target","placeholder","type","strength","required","length","s","disabled","AppSetup","useLocation","history","useHistory","isPrivateKeyInitialized","initialized","notReady","pathname","push","PageNavigation","NavigationItem","text","to","setTimeout","Unlocked","isUnlocked","setState","isIdle","useIdle","useRequireUnlock","UnlockedRoute","opts","AppLayout","pageTitle","title","buildPageTitle","input","PageTitle","copyToClipboard","createElement","setAttribute","appendChild","select","result","execCommand","removeChild","feedBackSuccess","message","toast","success","undetectableSplitString","str","nextWordSize","min","max","output","strLng","i","Math","floor","random","PrivateMessageRecord","id","messageRaw","encryptedMessage","contact","createdAt","mine","messages","rawMessages","serialize","contactIndex","findIndex","set","none","filter","createNewPrivateMessageRecord","Date","toISOString","uuidv4","record","save","insertDecryptedMessageRecord","loadPrivateMessagesForContact","map","m","loadedFromStorage","RecordContact","emailHash","contactRecord","contacts","existingContact","find","c","Object","assign","serializeWithoutId","contactsStore","removeContact","hookstate","getContactsStore","contactStore","ContactAvatar","height","width","formatToBase64Undetectable","string","encodeBase64","getPrivateKey","pk","Uint8Array","encryptMessage","publicKeyString","messageString","pubKeyUInt8Array","decodeBase64","msgUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","formatNonce","sample","CreateNewPrivateMessage","editorRef","modalIsOpened","current","focus","reactUseState","EditorState","createEmpty","editorState","setEditorState","rawContent","convertToRaw","getCurrentContent","blocks","block","trim","join","copyToClipBoard","hasText","decodeBase64Undetectable","base64String","slice","decryptMessage","encryptedString","split","encryptedMessageString","nonceString","decryptedMessage","open","encodeUTF8","feedbackError","DecodeNewPrivateMessage","encryptedContentRaw","decryptFile","encryptedFile","fullExtension","extension","arrayBuffer","decryptedFileInt8","decryptedFile","Blob","fileName","downloadFile","blob","url","URL","createObjectURL","href","download","click","revokeObjectURL","DecryptFile","inputRef","fileProcessing","files","encryptFile","file","outputFileIntArray","outputFile","pop","EncryptFile","mergeStyles","forEach","blockOfClasses","Message","ownerClassContainer","ownerClass","datetime","substring","PrivateMessages","loadPrivateMessages","reverse","PublicMessages","ContactPage","useParams","useRouteMatch","path","ready","getContact","exact","AddNewContact","inputPkNameEmail","modalOpened","atob","importContactFromString","ContactListItem","destroy","ContactsList","ContactsStoreLoader","setContactsStore","ContactsPage","useEncryptedStorage","ShowSharablePublicKey","readableKey","email","encodedName","TextEncoder","encode","encodedEmail","cryptoMd5","md5","showCopied","HomePage","PageNotFound","Router","UnlockPage","showError","queryParams","URLSearchParams","search","redirectTo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b5dd6130.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import * as localforage from 'localforage';\nimport {createState, useState} from '@hookstate/core';\nimport {useEffect} from 'react';\nconst globalState = createState({});\n\nexport function useLocalForage(keyName) {\n  const state = useState(globalState);\n\n  useEffect(() => {\n    if (state[keyName].get() !== undefined) return;\n\n    localforage.getItem(keyName).then((value) => {\n      state.merge({\n        [keyName]: value,\n      });\n    });\n  }, [keyName, state]);\n\n  function setter(value) {\n    state.merge({\n      [keyName]: value,\n    });\n    localforage.setItem(keyName, value);\n  }\n  let outputValue = state[keyName].get();\n  if (outputValue === undefined) {\n    outputValue = 'NOT_READY';\n  }\n\n  return [outputValue, setter];\n}","import * as localforage from 'localforage';\nimport {EncryptStorage} from './encrypted-storage';\nimport {resetKeyPairs} from '../../hooks/use-key-pairs';\nlet encryptStorage;\nwindow.localforage = localforage;\n\nexport function getItemFromStorage(keyName) {\n  if (!encryptStorage) return null;\n  return encryptStorage.decrypt(keyName);\n}\n\nexport function setItemInStorage(keyName, value) {\n  if (!encryptStorage) throw new Error('Pin not set');\n  return encryptStorage.encrypt(keyName, value);\n}\n\nexport function setStoragePin(pin) {\n  encryptStorage = new EncryptStorage(pin, localforage);\n}\n\nexport function disableStorage() {\n  encryptStorage = null;\n  resetKeyPairs();\n}","import * as Crypto from 'crypto-js';\n\nexport class EncryptStorage {\n  constructor(secret, storage) {\n    this.secret = secret;\n    this.storage = storage;\n  }\n\n  encrypt(key, data) {\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    } else if (typeof data === 'number') {\n      data = data.toString();\n    } else if (typeof data !== 'string') {\n      throw new Error('invalid type');\n    }\n    const encryptedData = Crypto.AES.encrypt(data, this.secret);\n    return this.storage.setItem(key, encryptedData.toString());\n  }\n\n  async decrypt(key) {\n    const data = await this.storage.getItem(key);\n    let decryptedData = null;\n    if (data) {\n      decryptedData = (Crypto.AES.decrypt(data, this.secret)).toString(Crypto.enc.Utf8);\n      try {\n        decryptedData = JSON.parse(decryptedData);\n      } catch (e) {}\n    }\n    return decryptedData;\n  }\n\n  remove(key) {\n    return this.storage.removeItem(key);\n  }\n}","import {createState, useState} from '@hookstate/core';\n\nconst store = createState({\n  privateKey: null,\n  publicKey: null,\n});\n\nexport function useKeyPairs() {\n  const state = useState(store);\n\n  return {\n    privateKey: state.privateKey.get(),\n    publicKey: state.publicKey.get(),\n    setKeyPair({publicKey, privateKey}) {\n      store.merge({\n        privateKey, publicKey,\n      });\n    },\n  };\n}\n\nexport function resetKeyPairs() {\n  store.merge({\n    privateKey: null,\n    publicKey: null,\n  });\n}","export default __webpack_public_path__ + \"static/media/enigma-logo.d8f45653.jpg\";","import logo from '../../../assets/enigma-logo.jpg';\n\nexport default function HomePageDescription({children: button}) {\n  return (\n    <div>\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"py-2\">\n        {button}\n      </div>\n\n      <div className=\"flex\">\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"font-bold text-3xl\">\n            Engima R3loaded\n          </div>\n\n          <div>\n            DIY Encrypt and decrypt messages and files\n          </div>\n          <div>\n            Don't trust \"words\" such as privacy, encryption, safety etc, coming from platforms which monetize your data. Only Mathematics and control can be trusted\n          </div>\n          <div>\n            Open source\n          </div>\n          <div>\n            No server or internet needed, 100% offline support\n          </div>\n          <div>\n            Works with any service such as: <b>Messenger, Signal, Slack, Whatsapp, Twitter, Instagram DM, SMS etc</b>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import {useEffect, useRef} from 'react';\nimport useOnClickOutside from 'use-onclickoutside';\n\nexport default function Modal({isOpened, close, children}) {\n  useEffect(() => {\n    if (isOpened) {\n      return document.body.classList.add('overflow-y-hidden');\n    } else {\n      return document.body.classList.remove('overflow-y-hidden');\n    }\n  }, [isOpened]);\n  const modalContentRef = useRef(null);\n  useOnClickOutside(modalContentRef, close);\n\n  if (!isOpened) return null;\n\n  return (\n    <>\n      <div className=\"absolute inset-0 bg-gray-500 opacity-70\"/>\n\n      <div className=\"absolute inset-0 items-center py-20 overflow-y-auto\">\n        <div className=\"mb-20 bg-white w-1/3 p-4 rounded shadow mx-auto\" ref={modalContentRef}>\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}","import {generateKeys} from '../../lib/utils/encryption/generate-keys';\nimport {isEmpty} from 'lodash';\nimport {passwordStrength} from 'check-password-strength';\nimport {setItemInStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport {useState} from '@hookstate/core';\nimport HomePageDescription from '../pages/home/home-page-description';\nimport Modal from '../utils/modal';\n\nexport default function SetupGeneratePrivateKey() {\n  const [_, setIsPrivateKeyInitialized] = useLocalForage('pk-initialized'); // eslint-disable-line no-unused-vars\n\n  const state = useState({\n    confirmMatch: true,\n    confirmPinValue: '',\n    emailValue: '',\n    nameValue: '',\n    passwordStrength: 'Too weak',\n    pinValue: '',\n    setupPinModal: false,\n  });\n  function openSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: true});\n  }\n\n  function closeSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: false});\n  }\n\n  function changePinValue(e) {\n    const value = e.target.value;\n    const strength = passwordStrength(value).value;\n    state.merge({\n      passwordStrength: strength,\n      pinValue: e.target.value,\n    });\n  }\n\n  function changeConfirmPinValue(e) {\n    const value = e.target.value;\n\n    state.merge((s) => {\n      return {\n        confirmMatch: value === s.pinValue,\n        confirmPinValue: value,\n      };\n    });\n  }\n\n  function generatePrivateKey(e) {\n    e.preventDefault();\n    const keyPair = generateKeys();\n    setStoragePin(state.pinValue.get());\n    setItemInStorage('key-pair', {\n      publicKey: Array.from(keyPair.publicKey),\n      secretKey: Array.from(keyPair.secretKey),\n    });\n    setItemInStorage('name', state.nameValue.get());\n    setItemInStorage('email', state.emailValue.get().toLowerCase().replace(/\\s/g, ''));\n    setIsPrivateKeyInitialized(true);\n  }\n\n  const submitDisabled = isEmpty(state.pinValue.get()) || state.passwordStrength.get() === 'Too weak' ||\n    isEmpty(state.confirmPinValue.get()) || !state.confirmMatch.get();\n\n  function changeNameValue(e) {\n    state.merge({nameValue: e.target.value});\n  }\n\n  function changeEmailValue(e) {\n    state.merge({emailValue: e.target.value});\n  }\n\n  return (\n    <div>\n      <HomePageDescription>\n        <div className=\"flex justify-center\">\n          <button onClick={openSetupPinModal} className=\"bg-black text-white text-4xl rounded p-2\">\n            Get started\n          </button>\n        </div>\n      </HomePageDescription>\n\n      <Modal isOpened={state.setupPinModal.get()} close={closeSetupPinModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={generatePrivateKey}>\n          <fieldset>\n            <legend>PIN setup</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"name\" value={state.nameValue.get()} onChange={changeNameValue} placeholder=\"Enter your name\" className=\"w-full\"/>\n              <span className=\"pure-form-message\">Optional</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input type=\"email\" name=\"email\" value={state.emailValue.get()} onChange={changeEmailValue} placeholder=\"Your email to have a avatar from gravatar.com\" className=\"w-full\"/>\n              <span className=\"pure-form-message\">Optional</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pin\" value={state.pinValue.get()} onChange={changePinValue} placeholder=\"Enter new PIN\" className=\"w-full\" required/>\n              {\n                state.pinValue.get().length > 0 &&\n                 <span className=\"pure-form-message\">{state.passwordStrength.get()}</span>\n              }\n              <span className=\"pure-form-message\">You can't recover or change the PIN later. <span className=\"underline\">Make sure you remember it and keep it secret</span></span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pinConfirm\" value={state.confirmPinValue.get()} onChange={changeConfirmPinValue}\n                placeholder=\"Confirm your PIN\"\n                className=\"w-full\"\n                required/>\n              {\n                !state.confirmMatch.get() &&\n                  <span className=\"pure-form-message text-red-500\">Pins don't match</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={submitDisabled}>\n              Submit\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {box} from 'tweetnacl';\n\nexport function generateKeys() {\n  return box.keyPair();\n}","import {useEffect} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport SetupGeneratePrivateKey from '../setup/generate-private-key';\n\nexport function AppSetup({children}) {\n  const location = useLocation();\n  const history = useHistory();\n  const [isPrivateKeyInitialized] = useLocalForage('pk-initialized');\n  const initialized = isPrivateKeyInitialized !== null;\n  const notReady = isPrivateKeyInitialized === 'NOT_READY';\n\n  useEffect(() => {\n    if (notReady) return;\n    if (!initialized && location.pathname !== '/') {\n      history.push('/');\n    }\n  }, [location, history, notReady, initialized]);\n\n  if (notReady) return null;\n  if (initialized) return children;\n\n  return (\n    <SetupGeneratePrivateKey/>\n  );\n}","import {Link, useHistory} from 'react-router-dom';\nimport {disableStorage} from '../../lib/utils/encryption/storage';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function PageNavigation() {\n  const history = useHistory();\n\n  function lock(e) {\n    e.preventDefault();\n    history.push(`/unlock`);\n    setTimeout(disableStorage, 50);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"flex flex-wrap justify-center pt-2\">\n        <NavigationItem text=\"Home\" to=\"/\"/>\n        <NavigationItem text=\"Contacts\" to=\"/contacts\"/>\n        <div className=\"pl-3\">\n          <button className=\"mx-1 text-center bg-black p-2 rounded text-white\" onClick={lock}>\n            Lock\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction NavigationItem({text, to}) {\n  return (\n    <Link to={to}>\n      <button className=\"mx-1 text-center bg-black p-2 rounded text-white\">\n        {text}\n      </button>\n    </Link>\n  );\n}","import {AppSetup} from './app-setup';\nimport {Route} from 'react-router-dom';\nimport {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\nimport PageNavigation from './navigation';\n\nexport default function Unlocked({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <div>\n      <div>\n        <PageNavigation/>\n      </div>\n      {\n        isUnlocked && <div>\n          {children}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport function UnlockedRoute({children, ...opts}) {\n  return (\n    <Route {...opts}>\n      <AppSetup>\n        <Unlocked>\n          {children}\n        </Unlocked>\n      </AppSetup>\n    </Route>\n  );\n}","import {disableStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useIdle} from 'react-use';\nimport {useKeyPairs} from './use-key-pairs';\n\nexport function useRequireUnlock() {\n  const history = useHistory();\n  const location = useLocation();\n  const {publicKey} = useKeyPairs();\n  const [state, setState] = useState(false);\n  const isIdle = useIdle(120e3);\n\n  useEffect(() => {\n    if (!publicKey) {\n      return history.push(`/unlock?redirectTo=${location.pathname}`);\n    }\n    setState(true);\n  }, [publicKey, setState, history, location]);\n\n  useEffect(() => {\n    if (!publicKey) return;\n    if (!isIdle) return;\n    history.push(`/unlock?redirectTo=${location.pathname}`);\n    setTimeout(disableStorage, 50);\n  }, [isIdle, publicKey, history, location.pathname]);\n\n  return state;\n}","export default function AppLayout({children}) {\n  return (\n    <div className=\"p-4\">\n      {children}\n    </div>\n  );\n}","import {Helmet, HelmetProvider} from 'react-helmet-async';\nconst pageTitle = document.title;\n\nexport function buildPageTitle(input) {\n  if (!input) return pageTitle;\n\n  return `${input} ${pageTitle}`;\n}\n\nexport default function PageTitle({children}) {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>{pageTitle}</title>\n      </Helmet>\n      {children}\n    </HelmetProvider>\n  );\n}","export function copyToClipboard(text) {\n  const input = document.createElement('input');\n  input.setAttribute('value', text);\n  document.body.appendChild(input);\n  input.select();\n  const result = document.execCommand('copy');\n  document.body.removeChild(input);\n  return result;\n}","import {toast} from 'react-toastify';\n\nexport function feedBackSuccess(message) {\n  toast.success(message);\n}","import {randomNumber} from '../numbers/random-number';\n\nexport function undetectableSplitString(str) {\n  let output = '';\n  const strLng = str.length;\n  let nextWordSize;\n\n  for (let i = 0; i < strLng; i++) {\n    if (!nextWordSize) {\n      nextWordSize = randomNumber(1, 10);\n    }\n\n    output += str[i];\n    nextWordSize -= 1;\n\n    if (!nextWordSize) {\n      output += ' ';\n    }\n  }\n\n  return output;\n}","export function randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import {copyToClipboard} from '../utils/actions/copy-to-clipboard';\nimport {feedBackSuccess} from '../feedback/success';\nimport {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {none} from '@hookstate/core';\nimport {undetectableSplitString} from '../utils/undetectable/split-string';\nimport {v4 as uuidv4} from 'uuid';\n\nexport class PrivateMessageRecord {\n  constructor({id, messageRaw, encryptedMessage, contact, createdAt, mine}) {\n    this.id = id;\n    this.messageRaw = messageRaw;\n    this.encryptedMessage = encryptedMessage;\n    this.contact = contact;\n    this.createdAt = createdAt;\n    this.mine = mine;\n  }\n\n  copyToClipBoard() {\n    copyToClipboard(undetectableSplitString(this.encryptedMessage));\n    feedBackSuccess('Encrypted message copied to clipboard');\n  }\n\n  async save() {\n    this.contact.messages.merge([this]);\n    const key = `private-messages-${this.contact.id.get()}`;\n\n    let rawMessages = await getItemFromStorage(key);\n    if (isEmpty(rawMessages)) rawMessages = [];\n\n    rawMessages.push(this.serialize());\n\n    setItemInStorage(key, rawMessages);\n  }\n\n  serialize() {\n    return {\n      createdAt: this.createdAt,\n      encryptedMessage: this.encryptedMessage,\n      id: this.id,\n      messageRaw: this.messageRaw,\n      mine: this.mine,\n    };\n  }\n\n  async destroy() {\n    const contactIndex = this.contact.messages.findIndex((message) => {\n      return message.id.get() === this.id;\n    });\n\n    this.contact.messages[contactIndex].set(none);\n    const key = `private-messages-${this.contact.id.get()}`;\n\n    let rawMessages = await getItemFromStorage(key);\n    rawMessages = rawMessages.filter((message) => {\n      return message.id !== this.id;\n    });\n\n    setItemInStorage(key, rawMessages);\n  }\n}\n\nexport async function createNewPrivateMessageRecord(messageRaw, encryptedMessage, contact) {\n  const createdAt = new Date().toISOString();\n  const id = uuidv4();\n  const mine = true;\n  const record = new PrivateMessageRecord({\n    contact, createdAt, encryptedMessage,\n    id, messageRaw, mine,\n  });\n\n  await record.save();\n\n  return record;\n}\n\nexport async function insertDecryptedMessageRecord(messageRaw, encryptedMessage, contact) {\n  const createdAt = new Date().toISOString();\n  const id = uuidv4();\n  const mine = false;\n  const record = new PrivateMessageRecord({\n    contact, createdAt, encryptedMessage,\n    id, messageRaw, mine,\n  });\n\n  await record.save();\n\n  return record;\n}\n\nexport async function destroyMessageRecord(messageRecord) {\n  return messageRecord.destroy();\n}","import {PrivateMessageRecord} from './private-message-record';\nimport {getItemFromStorage} from '../utils/encryption/storage';\nimport {isEmpty} from 'lodash';\n\nexport async function loadPrivateMessagesForContact(contact) {\n  const key = `private-messages-${contact.id}`;\n\n  const rawMessages = await getItemFromStorage(key);\n\n  if (isEmpty(rawMessages)) return [];\n\n  return rawMessages.map((m) => {\n    const message = new PrivateMessageRecord(m);\n    message.contact = contact;\n    return message;\n  });\n}","import {loadPrivateMessagesForContact} from '../private-messages/private-messages-store';\nimport {removeContact, saveContact} from './contacts-store';\n\nexport class RecordContact {\n  constructor({id, name, emailHash, publicKey}) {\n    this.id = id;\n    this.name = name;\n    this.emailHash = emailHash;\n    this.publicKey = publicKey;\n    this.messages = [];\n  }\n\n  save() {\n    return saveContact(this);\n  }\n\n  destroy() {\n    return removeContact(this);\n  }\n\n  serialize() {\n    return {\n      emailHash: this.emailHash, id: this.id,\n      name: this.name, publicKey: this.publicKey,\n    };\n  }\n\n  serializeWithoutId() {\n    const result = this.serialize();\n    delete result.id;\n    return result;\n  }\n\n  async loadPrivateMessages(hookstate) {\n    hookstate.messages.set(await loadPrivateMessagesForContact(this));\n  }\n}","import {RecordContact} from './record-contact';\nimport {createState} from '@hookstate/core';\nimport {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {none} from '@hookstate/core';\n\nlet loadedFromStorage;\n\nexport const contactsStore = createState({\n  contacts: [],\n});\n\nexport function saveContact(contactRecord) {\n  getItemFromStorage('contacts').then((contacts) => {\n    if (isEmpty(contacts)) contacts = [];\n\n    const existingContact = contacts.find((c) => {\n      return c.publicKey === contactRecord.publicKey;\n    });\n    if (existingContact) {\n      Object.assign(existingContact, contactRecord.serializeWithoutId());\n      const storeContact = contactsStore.contacts.find((contact) => {\n        return contact.publicKey.get() === contactRecord.publicKey;\n      });\n      storeContact.merge(contactRecord.serializeWithoutId());\n    } else {\n      contactsStore.contacts.merge([contactRecord]);\n      contacts.push(contactRecord.serialize());\n    }\n\n    setItemInStorage('contacts', contacts);\n  });\n}\n\nexport async function removeContact(contactRecord) {\n  let contacts = await getItemFromStorage('contacts');\n  if (isEmpty(contacts)) return;\n  contacts = contacts.filter((contact) => {\n    return contact.publicKey !== contactRecord.publicKey;\n  });\n\n  const contactIndex = contactsStore.contacts.findIndex((contact) => {\n    return contact.publicKey.get() === contactRecord.publicKey;\n  });\n\n  if (contactIndex !== undefined) contactsStore.contacts[contactIndex].set(none);\n\n  await setItemInStorage('contacts', contacts);\n}\n\nexport async function getContactsStore() {\n  if (loadedFromStorage) {\n    return contactsStore;\n  }\n\n  loadedFromStorage = true;\n  let contacts = await getItemFromStorage('contacts');\n  if (isEmpty(contacts)) return contactsStore;\n\n  contacts = contacts.map((c) => {\n    return new RecordContact(c);\n  });\n\n  contactsStore.merge({contacts});\n\n  return contactsStore;\n}\n\nexport async function getContact(id) {\n  const contactStore = await getContactsStore();\n\n  const record = contactStore.contacts.find((contact) => {\n    return contact.id.get() === id;\n  });\n\n  if (!record.get()) return {};\n\n  return new RecordContact(JSON.parse(JSON.stringify(record.get())));\n}","export default function ContactAvatar({contact, height, width}) {\n  const src = `http://www.gravatar.com/avatar/${contact.emailHash.get()}`;\n\n  return (\n    <img src={src} className={`rounded-full ${height} ${width}`}/>\n  );\n}","import {getItemFromStorage} from './storage';\nimport {isEmpty} from 'lodash';\n\nlet privateKey;\nlet publicKey;\n\nexport async function getPrivateKey() {\n  if (!isEmpty(privateKey)) return privateKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return privateKey = Uint8Array.from(pk.secretKey);\n}\n\nexport async function getPublicKey() {\n  if (!isEmpty(publicKey)) return publicKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return publicKey = Uint8Array.from(pk.publicKey);\n}","import {\n  encodeBase64,\n} from 'tweetnacl-util';\nimport {isEmpty} from 'lodash';\n\nexport function formatToBase64Undetectable(string) {\n  if (isEmpty(string)) return;\n\n  const output = encodeBase64(string);\n\n  return output.replace(/=/g, '');\n}","import {box, randomBytes} from 'tweetnacl';\nimport {decodeBase64, decodeUTF8} from 'tweetnacl-util';\nimport {formatToBase64Undetectable} from '../undetectable/format-to-base-64-undetectable';\nimport {getPrivateKey} from './keys';\nimport {sample} from 'lodash';\n\nexport async function encryptMessage(publicKeyString, messageString) {\n  const pubKeyUInt8Array = decodeBase64(publicKeyString);\n  const msgUInt8Array = decodeUTF8(messageString);\n  const nonce = randomBytes(box.nonceLength);\n\n  const encryptedMessage = box(\n      msgUInt8Array,\n      nonce,\n      pubKeyUInt8Array,\n      await getPrivateKey(),\n  );\n  return formatToBase64Undetectable(encryptedMessage) + formatNonce(nonce);\n}\n\nfunction formatNonce(nonce) {\n  const char = sample(['?', '!', '.', ',']);\n\n  return char + formatToBase64Undetectable(nonce);\n}","import {Editor, EditorState, convertToRaw} from 'draft-js';\nimport {createNewPrivateMessageRecord} from '../../../lib/private-messages/private-message-record';\nimport {encryptMessage} from '../../../lib/utils/encryption/encrypt-message';\nimport {useState as reactUseState, useEffect, useRef} from 'react';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport default function CreateNewPrivateMessage({contact}) {\n  const editorRef = useRef();\n  const state = useState({\n    modalIsOpened: false,\n  });\n\n  useEffect(() => {\n    if (!state.modalIsOpened.get()) return;\n    editorRef.current.focus();\n  }, [state.modalIsOpened.get()]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [editorState, setEditorState] = reactUseState(\n      () => EditorState.createEmpty(),\n  );\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalIsOpened: true});\n  }\n\n  function closeModal() {\n    state.merge({modalIsOpened: false});\n  }\n\n  async function save(e) {\n    e.preventDefault();\n    let rawContent = convertToRaw(editorState.getCurrentContent());\n    rawContent = rawContent.blocks.map((block) => (!block.text.trim() && '\\n') || block.text).join('\\n');\n    const encryptedMessage = await encryptMessage(contact.publicKey.get(), rawContent);\n    const record = await createNewPrivateMessageRecord(rawContent, encryptedMessage, contact);\n\n    state.merge({modalIsOpened: false});\n    setEditorState(EditorState.createEmpty());\n\n    record.copyToClipBoard();\n  }\n\n  return (\n    <>\n      <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" onClick={openModal}>\n        Encrypt message\n      </button>\n\n      <Modal isOpened={state.modalIsOpened.get()} close={closeModal}>\n        <form onSubmit={save}>\n          <div className=\"border-gray-300 border border-solid p-2\">\n            <Editor editorState={editorState} onChange={setEditorState} placeholder=\"Type your message\" ref={editorRef}/>\n          </div>\n\n          <div className=\"flex justify-end my-2\">\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-1/3\" disabled={!editorState.getCurrentContent().hasText()}>\n              Encrypt message\n            </button>\n          </div>\n        </form>\n      </Modal>\n    </>\n  );\n}","import {decodeBase64} from 'tweetnacl-util';\n\nexport function decodeBase64Undetectable(base64String) {\n  if (base64String.length % 4 !== 0) {\n    base64String += ('===').slice(0, 4 - (base64String.length % 4));\n  }\n\n  return decodeBase64(base64String);\n}","import {box} from 'tweetnacl';\nimport {decodeBase64, encodeUTF8} from 'tweetnacl-util';\nimport {decodeBase64Undetectable} from '../undetectable/decode-base-64-undetectable';\nimport {getPrivateKey} from './keys';\nimport {isEmpty} from 'lodash';\n\nexport async function decryptMessage(publicKeyString, encryptedString) {\n  const [encryptedMessageString, nonceString] = encryptedString.split(/\\?|!|\\.|,/);\n  if (isEmpty(encryptedMessageString) || isEmpty(nonceString)) throw new Error('Invalid encrypted message');\n  const pubKeyUInt8Array = decodeBase64(publicKeyString);\n  const nonce = decodeBase64Undetectable(nonceString);\n  const encryptedMessage = decodeBase64Undetectable(encryptedMessageString);\n  const decryptedMessage = box.open(encryptedMessage, nonce, pubKeyUInt8Array, await getPrivateKey());\n  return encodeUTF8(decryptedMessage);\n}","import {toast} from 'react-toastify';\n\nexport function feedbackError(message) {\n  toast.error(message);\n}","import {Editor, EditorState, convertToRaw} from 'draft-js';\nimport {decryptMessage} from '../../../lib/utils/encryption/decrypt-message';\nimport {feedBackSuccess} from '../../../lib/feedback/success';\nimport {feedbackError} from '../../../lib/feedback/error';\nimport {\n  insertDecryptedMessageRecord,\n} from '../../../lib/private-messages/private-message-record';\nimport {useState as reactUseState, useEffect, useRef} from 'react';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport default function DecodeNewPrivateMessage({contact}) {\n  const editorRef = useRef();\n  const state = useState({\n    modalIsOpened: false,\n  });\n\n  useEffect(() => {\n    if (!state.modalIsOpened.get()) return;\n    editorRef.current.focus();\n  }, [state.modalIsOpened.get()]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const [editorState, setEditorState] = reactUseState(\n      () => EditorState.createEmpty(),\n  );\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalIsOpened: true});\n  }\n\n  function closeModal() {\n    state.merge({modalIsOpened: false});\n  }\n\n  async function decrypt(e) {\n    e.preventDefault();\n    let encryptedContentRaw = convertToRaw(editorState.getCurrentContent());\n    encryptedContentRaw = encryptedContentRaw.blocks.map((block) => (!block.text.trim() && '\\n') || block.text)\n        .join('').replace(/\\s/g, '');\n    let messageRaw;\n    try {\n      messageRaw = await decryptMessage(contact.publicKey.get(), encryptedContentRaw);\n    } catch {\n      return feedbackError('Invalid encrypted message');\n    }\n    await insertDecryptedMessageRecord(messageRaw, encryptedContentRaw, contact);\n    state.merge({modalIsOpened: false});\n    setEditorState(EditorState.createEmpty());\n\n    feedBackSuccess('Message decrypted!');\n  }\n\n  return (\n    <>\n      <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" onClick={openModal}>\n        Decrypt message\n      </button>\n\n      <Modal isOpened={state.modalIsOpened.get()} close={closeModal}>\n        <form onSubmit={decrypt}>\n          <div className=\"border-gray-300 border border-solid p-2\">\n            <Editor editorState={editorState} onChange={setEditorState} placeholder=\"Paste the encrypted message\" ref={editorRef}/>\n          </div>\n\n          <div className=\"flex justify-end my-2\">\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-1/3\" disabled={!editorState.getCurrentContent().hasText()}>\n              Decrypt message\n            </button>\n          </div>\n        </form>\n      </Modal>\n    </>\n  );\n}","import {box} from 'tweetnacl';\nimport {decodeBase64} from 'tweetnacl-util';\nimport {decodeBase64Undetectable} from '../undetectable/decode-base-64-undetectable';\nimport {getPrivateKey} from './keys';\nimport {isEmpty} from 'lodash';\nimport {v4 as uuidv4} from 'uuid';\n\nexport async function decryptFile(publicKeyString, encryptedFile) {\n  const match = encryptedFile.name.match(/-(.*)\\.txt$/);\n  if (isEmpty(match)) throw new Error('Invalid encrypted file');\n  const [fullExtension, extension] = match;\n\n  const nonce = decodeBase64Undetectable(encryptedFile.name.replace(fullExtension, ''));\n  const pubKeyUInt8Array = decodeBase64(publicKeyString);\n\n  const decryptedFileInt8 = box.open(new Uint8Array(await encryptedFile.arrayBuffer()), nonce, pubKeyUInt8Array, await getPrivateKey());\n\n  const decryptedFile = new Blob([decryptedFileInt8], {\n    type: 'application/octet-stream',\n  });\n\n  return {\n    decryptedFile,\n    fileName: `${uuidv4()}.${extension}`,\n  };\n}","export function downloadFile(blob, fileName) {\n  const url = window.URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = fileName;\n  a.classList.add('hidden');\n  document.body.appendChild(a);\n  a.click();\n  a.remove();\n\n  setTimeout(() => {\n    window.URL.revokeObjectURL(blob);\n  }, 1000);\n}","import {decryptFile} from '../../../lib/utils/encryption/decrypt-file';\nimport {downloadFile} from '../../../lib/utils/files/download-file';\nimport {feedBackSuccess} from '../../../lib/feedback/success';\nimport {feedbackError} from '../../../lib/feedback/error';\nimport {useRef} from 'react';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport default function DecryptFile({contact}) {\n  const inputRef = useRef();\n  const state = useState({\n    fileProcessing: false,\n    modalIsOpened: false,\n  });\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalIsOpened: true});\n  }\n\n  function closeModal() {\n    if (state.fileProcessing.get()) return;\n    state.merge({modalIsOpened: false});\n  }\n\n  async function decrypt(e) {\n    e.preventDefault();\n    state.merge({\n      fileProcessing: true,\n    });\n\n    try {\n      const {decryptedFile, fileName} = await decryptFile(contact.publicKey.get(), e.target.files[0]);\n      downloadFile(decryptedFile, fileName);\n    } catch {\n      e.target.value = '';\n      state.merge({fileProcessing: false});\n      return feedbackError('Unable to decrypt file');\n    }\n\n    e.target.value = '';\n\n    state.merge({\n      fileProcessing: false,\n      modalIsOpened: false,\n    });\n\n    feedBackSuccess('File ready');\n  }\n\n  function selectFile(e) {\n    e.preventDefault();\n    inputRef.current.click();\n  }\n\n  return (\n    <>\n      <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" onClick={openModal}>\n        Decrypt file\n      </button>\n\n      <Modal isOpened={state.modalIsOpened.get()} close={closeModal}>\n        <input type=\"file\" className=\"hidden\" ref={inputRef} onChange={decrypt}/>\n\n        <div className=\"my-1\">\n          As soon as the file is decrypted, you can download it\n        </div>\n\n        <button className=\"pure-button pure-button-primary bg-black w-full\" onClick={selectFile} disabled={state.fileProcessing.get()}>\n          Select encrypted file\n        </button>\n      </Modal>\n    </>\n  );\n}","import {box, randomBytes} from 'tweetnacl';\nimport {decodeBase64} from 'tweetnacl-util';\nimport {formatToBase64Undetectable} from '../undetectable/format-to-base-64-undetectable';\nimport {getPrivateKey} from './keys';\n\nexport async function encryptFile(publicKeyString, file) {\n  const nonce = randomBytes(box.nonceLength);\n  const pubKeyUInt8Array = decodeBase64(publicKeyString);\n\n  const outputFileIntArray = box(\n      new Uint8Array(await file.arrayBuffer()),\n      nonce,\n      pubKeyUInt8Array,\n      await getPrivateKey(),\n  );\n\n  const outputFile = new Blob([outputFileIntArray], {\n    type: 'application/octet-stream',\n  });\n  const extension = file.name.split('.').pop();\n\n  return {\n    fileName: `${formatToBase64Undetectable(nonce)}-${extension}.txt`,\n    outputFile,\n  };\n}","import {downloadFile} from '../../../lib/utils/files/download-file';\nimport {encryptFile} from '../../../lib/utils/encryption/encrypt-file';\nimport {feedBackSuccess} from '../../../lib/feedback/success';\nimport {useRef} from 'react';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport default function EncryptFile({contact}) {\n  const inputRef = useRef();\n  const state = useState({\n    fileProcessing: false,\n    modalIsOpened: false,\n  });\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalIsOpened: true});\n  }\n\n  function closeModal() {\n    if (state.fileProcessing.get()) return;\n    state.merge({modalIsOpened: false});\n  }\n\n  async function encrypt(e) {\n    e.preventDefault();\n    state.merge({\n      fileProcessing: true,\n    });\n\n    const {outputFile, fileName} = await encryptFile(contact.publicKey.get(), e.target.files[0]);\n    e.target.value = '';\n\n    downloadFile(outputFile, fileName);\n\n    state.merge({\n      fileProcessing: false,\n      modalIsOpened: false,\n    });\n\n    feedBackSuccess('File encrypted');\n  }\n\n  function selectFile(e) {\n    e.preventDefault();\n    inputRef.current.click();\n  }\n\n  return (\n    <>\n      <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" onClick={openModal}>\n        Encrypt file\n      </button>\n\n      <Modal isOpened={state.modalIsOpened.get()} close={closeModal}>\n        <input type=\"file\" className=\"hidden\" ref={inputRef} onChange={encrypt}/>\n\n        <div className=\"my-1\">\n          As soon as the file is encrypted you will download it, <span className=\"font-bold\">do not rename it</span>\n        </div>\n\n        <button className=\"pure-button pure-button-primary bg-black w-full\" onClick={selectFile} disabled={state.fileProcessing.get()}>\n          Select unencrypted file\n        </button>\n      </Modal>\n    </>\n  );\n}","export function mergeStyles(...input) {\n  const output = [];\n  input.forEach((blockOfClasses) => {\n    if (!blockOfClasses) return;\n    blockOfClasses.split(/\\s/g).forEach((className) => {\n      if (className.length > 0) output.push(className);\n    });\n  });\n\n  return output.join(' ');\n}","import {mergeStyles} from '../../../lib/utils/string/merge-styles';\nimport TimeAgo from 'timeago-react';\n\nexport default function Message({message}) {\n  const {messageRaw, createdAt, mine, encryptedMessage} = message;\n  let ownerClassContainer; let ownerClass;\n\n  if (mine.get()) {\n    ownerClassContainer = 'justify-end pl-20';\n    ownerClass = 'text-right';\n  } else {\n    ownerClassContainer = 'pr-20';\n    ownerClass = 'bg-green-300';\n  }\n\n  return (\n    <div className={mergeStyles('flex', ownerClassContainer)}>\n      <div className={mergeStyles('whitespace-pre-wrap my-1 p-2 border border-solid border-gray-300 rounded break-all', ownerClass)}>\n        {messageRaw.get()}\n\n        <div className={mergeStyles('pt-1')}>\n          <TimeAgo datetime={createdAt.get()}/>\n        </div>\n\n        <div className=\"text-xs border-solid border-gray-300 border-t p-1\">\n          #{encryptedMessage.get().substring(0, 8)}\n        </div>\n      </div>\n    </div>\n  );\n}","import {useEffect} from 'react';\nimport CreateNewPrivateMessage from './create-new-private-message';\nimport DecodeNewPrivateMessage from './decode-new-private-message';\nimport DecryptFile from './decrypt-file';\nimport EncryptFile from './encrypt-file';\nimport Message from './message';\n\nexport default function PrivateMessages({contact}) {\n  useEffect(() => {\n    if (contact.messages.length > 0) return;\n    contact.get().loadPrivateMessages(contact);\n  }, [contact.id.get()]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div>\n      <div className=\"text-lg italic\">\n        Private messages\n      </div>\n\n      <div className=\"py-2 flex justify-between\">\n        <div className=\"w-1/2 pr-1\">\n          <DecodeNewPrivateMessage contact={contact}/>\n\n          <div className=\"pt-1\">\n            <DecryptFile contact={contact}/>\n          </div>\n        </div>\n        <div className=\"w-1/2 pl-1\">\n          <CreateNewPrivateMessage contact={contact}/>\n          <div className=\"pt-1\">\n            <EncryptFile contact={contact}/>\n          </div>\n        </div>\n      </div>\n\n      {\n        contact.messages.map((message) => {\n          return (\n            <div key={message.id.get()}>\n              <Message message={message}/>\n            </div>\n          );\n        }).reverse()\n      }\n    </div>\n  );\n}","export default function PublicMessages() {\n  return (\n    <div>\n      public\n    </div>\n  );\n}","import {Helmet} from 'react-helmet-async';\nimport {Link, Route, Switch, useParams, useRouteMatch} from 'react-router-dom';\nimport {buildPageTitle} from '../page/page-title';\nimport {getContact} from '../../lib/contacts/contacts-store';\nimport {useEffect} from 'react';\nimport {useState} from '@hookstate/core';\nimport ContactAvatar from '../contacts/avatar';\nimport PrivateMessages from './contact/private-messages';\nimport PublicMessages from './contact/public-messages';\n\nexport default function ContactPage() {\n  const {id} = useParams();\n  const {path, url} = useRouteMatch();\n  const state = useState({\n    contact: null,\n    ready: false,\n  });\n\n  useEffect(() => {\n    getContact(id).then((contact) => {\n      state.merge({\n        contact,\n        ready: true,\n      });\n    });\n  }, [id]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const {contact, ready} = state;\n\n  if (!contact?.id?.get() && !ready.get()) return null;\n\n  if (!contact?.id?.get()) {\n    return (\n      <>\n        <Helmet>\n          <title>{buildPageTitle('Contact not found')}</title>\n        </Helmet>\n        <div>\n          Contact not found\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle(contact.name.get())}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto\">\n        <div>\n          <div className=\"flex justify-center pb-2\">\n            <ContactAvatar contact={contact} height=\"h-20\" width=\"w-20\"/>\n          </div>\n          <h1 className=\"text-center\">{contact.name.get()}</h1>\n\n          <div>\n            <div className=\"my-1 flex justify-center\">\n              <div className=\"px-1 underline\">\n                <Link to={`${url}`}>Private Messages</Link>\n              </div>\n              <div className=\"px-1 underline\">\n                <Link to={`${url}/public-messages`}>Public Messages</Link>\n              </div>\n            </div>\n\n            <Switch>\n              <Route exact path={path}>\n                <PrivateMessages contact={contact}/>\n              </Route>\n\n              <Route path={`${path}/public-messages`}>\n                <PublicMessages />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","import {importContactFromString} from '../../../lib/contacts/import-contact-from-string';\nimport {isEmpty} from 'lodash';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport function AddNewContact() {\n  const state = useState({\n    inputPkNameEmail: '',\n    modalOpened: false,\n  });\n\n  function closeModal() {\n    state.merge({modalOpened: false});\n  }\n\n  function addNewContact(e) {\n    e.preventDefault();\n    importContactFromString(state.inputPkNameEmail.get());\n    state.merge({\n      inputPkNameEmail: '',\n      modalOpened: false,\n    });\n  }\n\n  function changeInputPkNameEmail(e) {\n    const {value} = e.target;\n    state.merge({inputPkNameEmail: value});\n  }\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalOpened: true});\n  }\n\n  return (\n    <div>\n      <button className=\"bg-black text-white p-3\" onClick={openModal}>\n        + Add new contact\n      </button>\n\n      <Modal isOpened={state.modalOpened.get()} close={closeModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={addNewContact}>\n          <fieldset>\n            <legend>Contact public key, name and email hashed</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"inputPkNameEmail\" value={state.inputPkNameEmail.get()} onChange={changeInputPkNameEmail} placeholder=\"Paste the contact code\" className=\"w-full\"/>\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" disabled={isEmpty(state.inputPkNameEmail.get())}>\n              Add\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {v4 as uuidv4} from 'uuid';\n\nimport {RecordContact} from './record-contact';\n\nexport function importContactFromString(str) {\n  let [publicKey, name, emailHash] = str.replace(/\\s/g, '').split('.');\n  name = atob(name);\n\n  const record = new RecordContact({\n    emailHash, id: uuidv4(), name, publicKey,\n  });\n  record.save();\n}","import {Link} from 'react-router-dom';\nimport ContactAvatar from '../../contacts/avatar';\n\nexport default function ContactListItem({contact}) {\n  function destroyContact(e) {\n    e.preventDefault();\n    contact.get().destroy();\n  }\n\n  return (\n    <div className=\"flex flex-wrap items-center justify-between p-2 bg-gray-300 my-2 rounded\">\n      <div>\n        <Link to={`/contacts/${contact.id.get()}`}>\n          <div className=\"flex items-center\">\n            <ContactAvatar contact={contact} height=\"h-20\" width=\"w-20\"/>\n            <span className=\"pl-2\">\n              {contact.name.get()}\n            </span>\n          </div>\n        </Link>\n      </div>\n\n      <div>\n        <button onClick={destroyContact}>\n          Remove\n        </button>\n      </div>\n    </div>\n  );\n}","import {contactsStore} from '../../../lib/contacts/contacts-store';\nimport {useState} from '@hookstate/core';\nimport ContactListItem from './contact-list-item';\n\nexport default function ContactsList() {\n  const state = useState(contactsStore);\n\n  return (\n    <>\n      {\n        state.contacts.map((contact) => {\n          return (\n            <ContactListItem contact={contact} key={contact.id.get()}/>\n          );\n        })\n      }\n    </>\n  );\n}","import {getContactsStore} from '../../../lib/contacts/contacts-store';\nimport {useEffect, useState} from 'react';\n\nexport default function ContactsStoreLoader({children}) {\n  const [contactsStore, setContactsStore] = useState();\n  useEffect(() => {\n    getContactsStore().then((c) => {\n      setContactsStore(c);\n    });\n  }, [setContactsStore]);\n\n  if (!contactsStore) return null;\n\n  return children;\n}","import {AddNewContact} from './contacts/add-new-contact';\nimport {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport ContactsList from './contacts/ contacts-list';\nimport ContactsStoreLoader from './contacts/contacts-store-loader';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle('Contacts')}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto pt-4\">\n        <h1 className=\"text-center text-2xl font-bold\">Contacts</h1>\n\n        <div className=\"flex justify-end\">\n          <AddNewContact/>\n        </div>\n\n        <div>\n          <ContactsStoreLoader>\n            <ContactsList/>\n          </ContactsStoreLoader>\n        </div>\n      </div>\n    </>\n  );\n}","import {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\n\nexport function useEncryptedStorage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    getItemFromStorage(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    setItemInStorage(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {copyToClipboard} from '../../../lib/utils/actions/copy-to-clipboard';\nimport {formatKeyReadable} from '../../../lib/utils/format/keys';\nimport {formatToBase64Undetectable} from '../../../lib/utils/undetectable/format-to-base-64-undetectable';\nimport {md5} from '../../../lib/utils/format/md5';\nimport {stringToU8} from '../../../lib/utils/format/string-to-u8';\nimport {undetectableSplitString} from '../../../lib/utils/undetectable/split-string';\nimport {useEncryptedStorage} from '../../../lib/hooks/use-encrypted-storage';\nimport {useKeyPairs} from '../../../lib/hooks/use-key-pairs';\nimport {useState} from '@hookstate/core';\n\nexport default function ShowSharablePublicKey() {\n  const {publicKey} = useKeyPairs();\n  const readableKey = formatKeyReadable(publicKey);\n  const [name] = useEncryptedStorage('name');\n  const [email] = useEncryptedStorage('email');\n  const encodedName = name ? formatToBase64Undetectable(stringToU8(name)) : '';\n  const encodedEmail = email ? md5(email) : '';\n  const output = `${readableKey}.${encodedName}.${encodedEmail}`;\n  const state = useState({\n    showCopied: false,\n  });\n\n  if (!readableKey) return null;\n  if (!name || !email) return null;\n\n  function copyPk(e) {\n    e.preventDefault();\n    const undetectableStr = undetectableSplitString(output);\n    copyToClipboard(undetectableStr);\n    state.merge({showCopied: true});\n\n    setTimeout(() => {\n      state.merge({showCopied: false});\n    }, 1500);\n  }\n\n  return (\n    <div className=\"p-3\">\n      <button className=\"text-center bg-gray-300 hover:bg-gray-200 rounded p-2 border border-solid border-gray-300\" onClick={copyPk}>\n        <div className=\"font-bold\">\n          My public key, name and email hashed\n        </div>\n        <div>\n          {\n            state.showCopied.get() ? 'Copied' : output\n          }\n        </div>\n\n        <div className=\"text-right text-sm\">\n          Click to copy\n        </div>\n      </button>\n    </div>\n  );\n}","export function stringToU8(str) {\n  return new TextEncoder().encode(str);\n}","import {formatToBase64Undetectable} from '../undetectable/format-to-base-64-undetectable';\n\nexport function formatKeyReadable(key) {\n  return formatToBase64Undetectable(key);\n}","import {MD5 as cryptoMd5} from 'crypto-js';\n\nexport function md5(str) {\n  return cryptoMd5(str).toString();\n}","import {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport ShowSharablePublicKey from './home/show-sharable-public-key';\n\nexport default function HomePage() {\n  return (<>\n    <Helmet>\n      <title>{buildPageTitle('Home')}</title>\n    </Helmet>\n    <div className=\"flex justify-center\">\n      <ShowSharablePublicKey/>\n    </div>\n  </>);\n}","export default function PageNotFound() {\n  return (\n    <div className=\"text-center text-3xl font-bold\">\n      Page not found\n    </div>\n  );\n}","import {\n  HashRouter,\n} from 'react-router-dom';\n\nexport default function Router({children}) {\n  return (\n    <HashRouter>\n      {children}\n    </HashRouter>\n  );\n}","import {Helmet} from 'react-helmet-async';\nimport {buildPageTitle} from '../page/page-title';\nimport {getItemFromStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {useHistory} from 'react-router-dom';\nimport {useKeyPairs} from '../../lib/hooks/use-key-pairs';\nimport {useQueryParams} from '../../lib/hooks/use-query-params';\nimport {useState} from '@hookstate/core';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function UnlockPage() {\n  const state = useState({pinValue: '', showError: false});\n  const history = useHistory();\n  const queryParams = useQueryParams();\n  const {setKeyPair} = useKeyPairs();\n\n  async function unlock(e) {\n    e.preventDefault();\n    const redirectTo = queryParams.get('redirectTo') || '/';\n    setStoragePin(state.pinValue.get());\n\n    try {\n      const keyPair = await getItemFromStorage('key-pair');\n      if (isEmpty(keyPair)) {\n        return state.merge({\n          pinValue: '',\n          showError: true,\n        });\n      }\n      setKeyPair(keyPair);\n\n      history.push(redirectTo);\n    } catch (e) {\n      return state.merge({\n        pinValue: '',\n        showError: true,\n      });\n    }\n  }\n\n  function updatePinValue(e) {\n    const {value} = e.target;\n    state.merge({pinValue: value});\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{buildPageTitle('Unlock')}</title>\n      </Helmet>\n      <div className=\"w-full md:w-1/3 mx-auto\">\n        <div className=\"flex justify-center\">\n          <img src={logo} alt=\"enigma\"/>\n        </div>\n\n        <form className=\"pure-form\" onSubmit={unlock}>\n          <fieldset>\n\n            <div className=\"pure-control-group pb-4\">\n              <input type=\"password\" value={state.pinValue.get()} onChange={updatePinValue} className=\"w-full\" placeholder=\"Enter your PIN to continue\"/>\n              {\n                state.showError.get() && <span className=\"pure-form-message text-red-500\">Invalid PIN</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={isEmpty(state.pinValue.get())}>\n              Unlock\n            </button>\n          </fieldset>\n        </form>\n      </div>\n    </>\n  );\n}","import {\n  useLocation,\n} from 'react-router-dom';\n\nexport function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}","import 'react-toastify/dist/ReactToastify.css';\nimport {AppSetup} from './components/page/app-setup';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {ToastContainer} from 'react-toastify';\nimport {UnlockedRoute} from './components/page/unlocked';\nimport AppLayout from './components/page/layout';\nimport ContactPage from './components/pages/contact';\nimport ContactsPage from './components/pages/contacts';\nimport HomePage from './components/pages/home';\nimport PageNotFound from './components/pages/page-not-found';\nimport PageTitle from './components/page/page-title';\nimport Router from './components/config/router';\nimport UnlockPage from './components/pages/unlock';\n\nexport default function App() {\n  return (\n    <>\n      <PageTitle>\n        <Router>\n          <AppLayout>\n            <Switch>\n              <UnlockedRoute path=\"/\" exact>\n                <HomePage/>\n              </UnlockedRoute>\n\n              <UnlockedRoute path=\"/contacts/:id\">\n                <ContactPage/>\n              </UnlockedRoute>\n\n              <UnlockedRoute path=\"/contacts\">\n                <ContactsPage/>\n              </UnlockedRoute>\n\n              <Route path=\"/unlock\">\n                <AppSetup>\n                  <UnlockPage/>\n                </AppSetup>\n              </Route>\n\n              <Route path=\"*\">\n                <PageNotFound/>\n              </Route>\n            </Switch>\n          </AppLayout>\n        </Router>\n      </PageTitle>\n      <ToastContainer/>\n    </>\n  );\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport './tailwind.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}