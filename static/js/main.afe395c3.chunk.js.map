{"version":3,"sources":["serviceWorkerRegistration.js","components/page/layout.jsx","components/utils/modal.jsx","components/pages/contacts/add-new-contact.jsx","lib/utils/encryption/storage.js","lib/utils/encryption/encrypted-storage.js","lib/utils/encryption/keys.js","lib/hooks/use-local-forage.js","lib/hooks/use-public-key.js","lib/hooks/use-require-unlock.js","components/pages/contacts.jsx","components/setup/generate-private-key.jsx","lib/utils/encryption/generate-keys.js","lib/hooks/use-encrypted-storage.js","components/pages/home/show-sharable-public-key.js","lib/utils/format/md5.js","lib/utils/format/keys.js","lib/utils/actions/copy-to-clipboard.js","components/pages/home.jsx","assets/enigma-logo.jpg","components/page/navigation.jsx","components/config/router.jsx","components/pages/unlock.jsx","lib/hooks/use-query-params.js","app.jsx","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AppLayout","children","className","Modal","isOpened","close","useEffect","document","body","classList","add","remove","modalContentRef","useRef","useOnClickOutside","ref","AddNewContact","useState","inputPkNameEmail","modalOpened","onClick","e","preventDefault","merge","get","onSubmit","name","value","onChange","target","placeholder","type","disabled","isEmpty","encryptStorage","EncryptStorage","secret","storage","this","key","data","JSON","stringify","toString","Error","encryptedData","Crypto","encrypt","setItem","a","getItem","decryptedData","decrypt","Utf8","parse","removeItem","getItemFromStorage","keyName","setItemInStorage","setStoragePin","pin","localforage","publicKey","useLocalForage","setState","pk","Uint8Array","from","usePublicKey","getPublicKey","useRequireUnlock","history","useHistory","useLocation","isPrivateKeyInitialized","isIdle","useIdle","undefined","setTimeout","push","pathname","ContactsPage","isUnlocked","SetupGeneratePrivateKey","setIsPrivateKeyInitialized","confirmMatch","confirmPinValue","emailValue","nameValue","passwordStrength","pinValue","setupPinModal","submitDisabled","keyPair","box","Array","secretKey","strength","required","s","useEncryptedStorage","ShowSharablePublicKey","str","readableKey","encodeBase64","formatKeyReadable","email","encodedName","encodedEmail","cryptoMd5","output","showCopied","text","input","createElement","setAttribute","appendChild","select","result","execCommand","removeChild","copyToClipboard","HomePage","PageNavigation","src","logo","alt","NavigationItem","to","Router","UnlockPage","showError","queryParams","URLSearchParams","search","redirectTo","privateKey","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"kMAYMA,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACJ,+GAKAb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,kBC9FpD,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SACjC,OACE,qBAAKC,UAAU,MAAf,SACGD,I,2CCAQ,SAASE,EAAT,GAA6C,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,MAAOJ,EAAW,EAAXA,SAC9CK,qBAAU,WACR,OAAIF,EACKG,SAASC,KAAKC,UAAUC,IAAI,qBAE5BH,SAASC,KAAKC,UAAUE,OAAO,uBAEvC,CAACP,IACJ,IAAMQ,EAAkBC,iBAAO,MAG/B,OAFAC,YAAkBF,EAAiBP,GAE9BD,EAGH,qCACE,qBAAKF,UAAU,4CAEf,qBAAKA,UAAU,sDAAf,SACE,qBAAKA,UAAU,kDAAkDa,IAAKH,EAAtE,SACGX,SARa,KCVjB,SAASe,IACd,IAAMxB,EAAQyB,YAAS,CACrBC,iBAAkB,GAClBC,aAAa,IAqBf,OACE,gCACE,wBAAQjB,UAAU,0BAA0BkB,QAPhD,SAAmBC,GACjBA,EAAEC,iBACF9B,EAAM+B,MAAM,CAACJ,aAAa,KAKxB,+BAIA,cAAChB,EAAD,CAAOC,SAAUZ,EAAM2B,YAAYK,MAAOnB,MAxB9C,WACEb,EAAM+B,MAAM,CAACJ,aAAa,KAuBxB,SACE,sBAAMjB,UAAU,8BAA8BuB,SArBpD,SAAuBJ,GACrBA,EAAEC,kBAoBE,SACE,qCACE,+EAEA,qBAAKpB,UAAU,qBAAf,SACE,uBAAOwB,KAAK,mBAAmBC,MAAOnC,EAAM0B,iBAAiBM,MAAOI,SAtBhF,SAAgCP,GAAI,IAC3BM,EAASN,EAAEQ,OAAXF,MACPnC,EAAM+B,MAAM,CAACL,iBAAkBS,KAoBiFG,YAAY,yBAAyB5B,UAAU,aAGvJ,wBAAQ6B,KAAK,SAAS7B,UAAU,kDAAkD8B,SAAUC,kBAAQzC,EAAM0B,iBAAiBM,OAA3H,2B,ICzCRU,E,+DCASC,EAAb,WACE,WAAYC,EAAQC,GAAU,oBAC5BC,KAAKF,OAASA,EACdE,KAAKD,QAAUA,EAHnB,2CAME,SAAQE,EAAKC,GACX,GAAoB,kBAATA,EACTA,EAAOC,KAAKC,UAAUF,QACjB,GAAoB,kBAATA,EAChBA,EAAOA,EAAKG,gBACP,GAAoB,kBAATH,EAChB,MAAM,IAAII,MAAM,gBAElB,IAAMC,EAAgBC,MAAWC,QAAQP,EAAMF,KAAKF,QACpD,OAAOE,KAAKD,QAAQW,QAAQT,EAAKM,EAAcF,cAfnD,4DAkBE,WAAcJ,GAAd,iBAAAU,EAAA,sEACqBX,KAAKD,QAAQa,QAAQX,GAD1C,OAGE,GAFMC,EADR,OAEMW,EAAgB,KAChBX,EAAM,CACRW,EAAiBL,MAAWM,QAAQZ,EAAMF,KAAKF,QAASO,SAASG,MAAWO,MAC5E,IACEF,EAAgBV,KAAKa,MAAMH,GAC3B,MAAO9B,KAPb,yBASS8B,GATT,gDAlBF,2EA8BE,SAAOZ,GACL,OAAOD,KAAKD,QAAQkB,WAAWhB,OA/BnC,KDGO,SAASiB,EAAmBC,GACjC,OAAKvB,EACEA,EAAekB,QAAQK,GADF,KAIvB,SAASC,EAAiBD,EAAS9B,GACxC,IAAIO,EAAgB,KAAM,cAC1B,OAAOA,EAAea,QAAQU,EAAS9B,GAGlC,SAASgC,EAAcC,GAC5B1B,EAAiB,IAAIC,EAAeyB,EAAKC,GAb3CrF,OAAOqF,YAAcA,E,IECjBC,E,QCDG,SAASC,EAAeN,GAAU,IAAD,EACZxC,qBADY,mBAC/BzB,EAD+B,KACxBwE,EADwB,KAEtC1D,qBAAU,WACRuD,UAAoBJ,GAASvE,MAAK,SAACyC,GACjCqC,EAASrC,QAEV,CAACqC,EAAUP,IAOd,MAAO,CAACjE,EALgB,SAACmC,GACvBqC,EAASrC,GACTkC,UAAoBJ,EAAS9B,K,4CDA1B,4BAAAsB,EAAA,yDACAhB,kBAAQ6B,GADR,yCAC2BA,GAD3B,uBAEYN,EAAmB,YAF/B,UAECS,EAFD,QAGDhC,kBAAQgC,GAHP,0EAIEH,EAAYI,WAAWC,KAAKF,EAAGH,YAJjC,4C,sBEVA,SAASM,IAAgB,IAAD,EACHnD,qBADG,mBACtBzB,EADsB,KACfwE,EADe,KAS7B,OANA1D,qBAAU,YFOL,WAAP,gCENI+D,GAAenF,MAAK,SAAC4E,GACnBE,EAASF,SAINtE,ECLF,SAAS8E,IACd,IAAMC,EAAUC,cACV/F,EAAWgG,cACXX,EAAYM,IAHe,EAICL,EAAe,kBAA1CW,EAJ0B,sBAKPzD,oBAAS,GALF,mBAK1BzB,EAL0B,KAKnBwE,EALmB,KAM3BW,EAASC,YAAQ,MAsBvB,OApBAtE,qBAAU,WACR,QAAgCuE,IAA5BH,EACJ,OAAgC,OAA5BA,GAEAZ,EAFyCE,GAAS,QAItDc,YAAW,WACTP,EAAQQ,KAAR,6BAAmCtG,EAASuG,aAC3C,MACF,CAACN,EAAyBH,EAAST,EAAWrF,EAAUuF,EAAUvF,EAASuG,WAE9E1E,qBAAU,WACHwD,GACAa,ILRPzC,EAAiB,KKUf4C,YAAW,WACTP,EAAQQ,KAAR,6BAAmCtG,EAASuG,aAC3C,OACF,CAACL,EAAQb,EAAWS,EAAS9F,EAASuG,WAElCxF,EChCM,SAASyF,EAAT,GAAmC,IAAZhF,EAAW,EAAXA,SAC9BiF,EAAaZ,IAEnB,OACE,gCACE,8BACGrE,IAIDiF,GAAc,sBAAKhF,UAAU,+BAAf,UACZ,oBAAIA,UAAU,iCAAd,sBAEA,qBAAKA,UAAU,mBAAf,SACE,cAACc,EAAD,Y,wBCTG,SAASmE,EAAT,GAA8C,IAAZlF,EAAW,EAAXA,SAAW,EACI8D,EAAe,kBADnB,mBACnDW,EADmD,KAC1BU,EAD0B,KAGpD5F,EAAQyB,YAAS,CACrBoE,cAAc,EACdC,gBAAiB,GACjBC,WAAY,GACZC,UAAW,GACXC,iBAAkB,WAClBC,SAAU,GACVC,eAAe,IA6CjB,IAAMC,EAAiB3D,kBAAQzC,EAAMkG,SAASlE,QAA2C,aAAjChC,EAAMiG,iBAAiBjE,OAC7ES,kBAAQzC,EAAM8F,gBAAgB9D,SAAWhC,EAAM6F,aAAa7D,MAU9D,OAAIkD,EAAgCzE,EAGlC,gCACE,wBAAQmB,QA1DZ,SAA2BC,GACzBA,EAAEC,iBACF9B,EAAM+B,MAAM,CAACoE,eAAe,KAwD1B,yBAIA,cAACxF,EAAD,CAAOC,SAAUZ,EAAMmG,cAAcnE,MAAOnB,MAzDhD,SAA4BgB,GAC1BA,EAAEC,iBACF9B,EAAM+B,MAAM,CAACoE,eAAe,KAuD1B,SACE,sBAAMzF,UAAU,8BAA8BuB,SAjCpD,SAA4BJ,GAC1BA,EAAEC,iBACF,IAAMuE,ECjDDC,MAAID,UDkDTlC,EAAcnE,EAAMkG,SAASlE,OAC7BkC,EAAiB,WAAY,CAC3BI,UAAWiC,MAAM5B,KAAK0B,EAAQ/B,WAC9BkC,UAAWD,MAAM5B,KAAK0B,EAAQG,aAEhCtC,EAAiB,OAAQlE,EAAMgG,UAAUhE,OACzCkC,EAAiB,QAASlE,EAAM+F,WAAW/D,OAC3C4D,GAA2B,IAuBvB,SACE,qCACE,+CAEA,qBAAKlF,UAAU,qBAAf,SACE,uBAAOwB,KAAK,OAAOC,MAAOnC,EAAMgG,UAAUhE,MAAOI,SAtB7D,SAAyBP,GACvB7B,EAAM+B,MAAM,CAACiE,UAAWnE,EAAEQ,OAAOF,SAqBqDG,YAAY,kBAAkB5B,UAAU,aAGtH,qBAAKA,UAAU,qBAAf,SACE,uBAAO6B,KAAK,QAAQL,KAAK,QAAQC,MAAOnC,EAAM+F,WAAW/D,MAAOI,SAtB5E,SAA0BP,GACxB7B,EAAM+B,MAAM,CAACgE,WAAYlE,EAAEQ,OAAOF,SAqBoEG,YAAY,gCAAgC5B,UAAU,aAGpJ,sBAAKA,UAAU,qBAAf,UACE,uBAAOwB,KAAK,MAAMC,MAAOnC,EAAMkG,SAASlE,MAAOI,SAlE3D,SAAwBP,GACtB,IAAMM,EAAQN,EAAEQ,OAAOF,MACjBsE,EAAWR,2BAAiB9D,GAAOA,MACzCnC,EAAM+B,MAAM,CACVkE,iBAAkBQ,EAClBP,SAAUrE,EAAEQ,OAAOF,SA6D8DG,YAAY,gBAAgB5B,UAAU,SAASgG,UAAQ,IAChI,sBAAMhG,UAAU,oBAAhB,SAAqCV,EAAMiG,iBAAiBjE,WAG9D,sBAAKtB,UAAU,qBAAf,UACE,uBAAOwB,KAAK,aAAaC,MAAOnC,EAAM8F,gBAAgB9D,MAAOI,SA9DzE,SAA+BP,GAC7B,IAAMM,EAAQN,EAAEQ,OAAOF,MAEvBnC,EAAM+B,OAAM,SAAC4E,GACX,MAAO,CACLd,aAAc1D,IAAUwE,EAAET,SAC1BJ,gBAAiB3D,OAwDmFG,YAAY,mBAAmB5B,UAAU,SAASgG,UAAQ,KAErJ1G,EAAM6F,aAAa7D,OAClB,sBAAMtB,UAAU,oBAAhB,iCAIN,wBAAQ6B,KAAK,SAAS7B,UAAU,yCAAyC8B,SAAU4D,EAAnF,8B,YEzGL,SAASQ,EAAoB3C,GAAU,IAAD,EACjBxC,qBADiB,mBACpCzB,EADoC,KAC7BwE,EAD6B,KAE3C1D,qBAAU,WACRkD,EAAmBC,GAASvE,MAAK,SAACyC,GAChCqC,EAASrC,QAEV,CAACqC,EAAUP,IAOd,MAAO,CAACjE,EALgB,SAACmC,GACvBqC,EAASrC,GACT+B,EAAiBD,EAAS9B,KCLf,SAAS0E,IACtB,ICPkBC,EDQZC,EELD,SAA2BhE,GAChC,IAAIN,kBAAQM,GAEZ,OAAOiE,uBAAajE,GFEAkE,CADFrC,KAD4B,EAG/BgC,EAAoB,QAA5B1E,EAHuC,sBAI9B0E,EAAoB,SAA7BM,EAJuC,oBAKxCC,EAAcjF,EAAO8E,uBAAa9E,GAAQ,GAC1CkF,EAAeF,GCZHJ,EDYeI,ECX1BG,cAAUP,GAAK3D,YDWoB,GACpCmE,EAAM,UAAMP,EAAN,aAAsBI,EAAtB,aAAsCC,GAC5CpH,EAAQyB,YAAS,CACrB8F,YAAY,IAGd,IAAKR,EAAa,OAAO,KAYzB,OACE,qBAAKrG,UAAU,MAAf,SACE,yBAAQA,UAAU,4FAA4FkB,QAZlH,SAAgBC,GACdA,EAAEC,iBGvBC,SAAyB0F,GAC9B,IAAMC,EAAQ1G,SAAS2G,cAAc,SACrCD,EAAME,aAAa,QAASH,GAC5BzG,SAASC,KAAK4G,YAAYH,GAC1BA,EAAMI,SACN,IAAMC,EAAS/G,SAASgH,YAAY,QACpChH,SAASC,KAAKgH,YAAYP,GHkBxBQ,CAAgBX,GAChBtH,EAAM+B,MAAM,CAACwF,YAAY,IAEzBjC,YAAW,WACTtF,EAAM+B,MAAM,CAACwF,YAAY,MACxB,OAKD,UACE,qBAAK7G,UAAU,YAAf,kDAGA,8BACG4G,IAGH,qBAAK5G,UAAU,qBAAf,gCItCO,SAASwH,EAAT,GAA+B,IAAZzH,EAAW,EAAXA,SAC1BiF,EAAaZ,IAEnB,OACE,qCACGrE,EAGCiF,GAAc,cAACC,EAAD,UACZ,qBAAKjF,UAAU,8CAAf,SACE,cAACmG,EAAD,W,YCdG,MAA0B,wCCG1B,SAASsB,IACtB,OACE,qCACE,qBAAKzH,UAAU,sBAAf,SACE,qBAAK0H,IAAKC,EAAMC,IAAI,aAEtB,sBAAK5H,UAAU,gCAAf,UACE,cAAC6H,EAAD,CAAgBf,KAAK,OAAOgB,GAAG,MAC/B,cAACD,EAAD,CAAgBf,KAAK,WAAWgB,GAAG,oBAM3C,SAASD,EAAT,GAAqC,IAAZf,EAAW,EAAXA,KAAMgB,EAAK,EAALA,GAC7B,OACE,qBAAK9H,UAAU,mDAAf,SACE,cAAC,IAAD,CAAM8H,GAAIA,EAAV,SAAehB,MChBN,SAASiB,EAAT,GAA6B,IAAZhI,EAAW,EAAXA,SAC9B,OACE,cAAC,IAAD,UACGA,ICAQ,SAASiI,IACtB,IAAM1I,EAAQyB,YAAS,CAACyE,SAAU,GAAIyC,WAAW,IAC3C5D,EAAUC,cACV4D,ECLC,IAAIC,gBAAgB5D,cAAc6D,QDEN,4CAKnC,WAAsBjH,GAAtB,iBAAA4B,EAAA,6DACE5B,EAAEC,iBACIiH,EAAaH,EAAY5G,IAAI,cACnCmC,EAAcnE,EAAMkG,SAASlE,OAH/B,kBAM6BgC,EAAmB,YANhD,UAMUgF,EANV,QAOQvG,kBAAQuG,GAPhB,yCAQahJ,EAAM+B,MAAM,CACjBmE,SAAU,GACVyC,WAAW,KAVnB,OAcI3I,EAAM+B,MAAM,CACVmE,SAAU,GACVyC,WAAW,IAGbrD,YAAW,WACTP,EAAQQ,KAAKwD,KACZ,IArBP,2EAuBW/I,EAAM+B,MAAM,CACjBmE,SAAU,GACVyC,WAAW,KAzBjB,2DALmC,sBAwCnC,OACE,sBAAKjI,UAAU,0BAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,qBAAK0H,IAAKC,EAAMC,IAAI,aAGtB,sBAAM5H,UAAU,YAAYuB,SA9CG,4CA8C/B,SACE,qCAEE,sBAAKvB,UAAU,0BAAf,UACE,uBAAO6B,KAAK,WAAWJ,MAAOnC,EAAMkG,SAASlE,MAAOI,SAf9D,SAAwBP,GAAI,IACnBM,EAASN,EAAEQ,OAAXF,MACPnC,EAAM+B,MAAM,CAACmE,SAAU/D,KAa+DzB,UAAU,SAAS4B,YAAY,+BAE3GtC,EAAM2I,UAAU3G,OAAS,sBAAMtB,UAAU,iCAAhB,4BAI7B,wBAAQ6B,KAAK,SAAS7B,UAAU,yCAAyC8B,SAAUC,kBAAQzC,EAAMkG,SAASlE,OAA1G,4BEpDK,SAASiH,IACtB,OACE,cAACR,EAAD,UACE,cAACjI,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0I,KAAK,IAAIC,OAAK,EAArB,SACE,cAACjB,EAAD,UACE,cAACC,EAAD,QAIJ,cAAC,IAAD,CAAOe,KAAK,UAAZ,SACE,cAACR,EAAD,MAGF,cAAC,IAAD,CAAOQ,KAAK,YAAZ,SACE,cAACzD,EAAD,UACE,cAAC0C,EAAD,QAIJ,cAAC,IAAD,CAAOe,KAAK,a,YCpBPE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5J,MAAK,YAAgD,IAA9C6J,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,EAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFlI,SAASgJ,eAAe,S1BQrB,SAAkBzK,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyK,IAAIC,mBAAwBjL,OAAOC,SAASiL,MACpDC,SAAWnL,OAAOC,SAASkL,OAIvC,OAGFnL,OAAOoL,iBAAiB,QAAQ,WAC9B,IAAM/K,EAAK,UAAM4K,mBAAN,sBAEPnL,IAgEV,SAAiCO,EAAOC,GAEtC+K,MAAMhL,EAAO,CACXiL,QAAS,CAAC,iBAAkB,YAEzB5K,MAAK,SAAC6K,GAEL,IAAMC,EAAcD,EAASD,QAAQtI,IAAI,gBAEnB,MAApBuI,EAASE,QACK,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG1CnL,UAAUC,cAAcmL,MAAMjL,MAAK,SAACC,GAClCA,EAAaiL,aAAalL,MAAK,WAC7BV,OAAOC,SAAS4L,eAKpBzL,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFZ2K,CAAwBzL,EAAOC,GAI/BC,UAAUC,cAAcmL,MAAMjL,MAAK,WACjCQ,QAAQC,IACJ,+GAMNf,EAAgBC,EAAOC,O0BjC/ByL,GAEA3B,M","file":"static/js/main.afe395c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","export default function AppLayout({children}) {\n  return (\n    <div className=\"p-4\">\n      {children}\n    </div>\n  );\n}","import {useEffect, useRef} from 'react';\nimport useOnClickOutside from 'use-onclickoutside';\n\nexport default function Modal({isOpened, close, children}) {\n  useEffect(() => {\n    if (isOpened) {\n      return document.body.classList.add('overflow-y-hidden');\n    } else {\n      return document.body.classList.remove('overflow-y-hidden');\n    }\n  }, [isOpened]);\n  const modalContentRef = useRef(null);\n  useOnClickOutside(modalContentRef, close);\n\n  if (!isOpened) return null;\n\n  return (\n    <>\n      <div className=\"absolute inset-0 bg-gray-500 opacity-70\"/>\n\n      <div className=\"absolute inset-0 items-center py-20 overflow-y-auto\">\n        <div className=\"mb-20 bg-white w-1/3 p-4 rounded shadow mx-auto\" ref={modalContentRef}>\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}","import {isEmpty} from 'lodash';\nimport {useState} from '@hookstate/core';\nimport Modal from '../../utils/modal';\n\nexport function AddNewContact() {\n  const state = useState({\n    inputPkNameEmail: '',\n    modalOpened: false,\n  });\n\n  function closeModal() {\n    state.merge({modalOpened: false});\n  }\n\n  function addNewContact(e) {\n    e.preventDefault();\n  }\n\n  function changeInputPkNameEmail(e) {\n    const {value} = e.target;\n    state.merge({inputPkNameEmail: value});\n  }\n\n  function openModal(e) {\n    e.preventDefault();\n    state.merge({modalOpened: true});\n  }\n\n  return (\n    <div>\n      <button className=\"bg-black text-white p-3\" onClick={openModal}>\n        + Add new contact\n      </button>\n\n      <Modal isOpened={state.modalOpened.get()} close={closeModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={addNewContact}>\n          <fieldset>\n            <legend>Contact public key, name and email hashed</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"inputPkNameEmail\" value={state.inputPkNameEmail.get()} onChange={changeInputPkNameEmail} placeholder=\"Paste the contact code\" className=\"w-full\"/>\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary bg-black w-full\" disabled={isEmpty(state.inputPkNameEmail.get())}>\n              Add\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import * as localforage from 'localforage';\nimport {EncryptStorage} from './encrypted-storage';\nlet encryptStorage;\nwindow.localforage = localforage;\n\nexport function getItemFromStorage(keyName) {\n  if (!encryptStorage) return null;\n  return encryptStorage.decrypt(keyName);\n}\n\nexport function setItemInStorage(keyName, value) {\n  if(!encryptStorage) throw \"Pin not set\"; // eslint-disable-line\n  return encryptStorage.encrypt(keyName, value);\n}\n\nexport function setStoragePin(pin) {\n  encryptStorage = new EncryptStorage(pin, localforage);\n}\n\nexport function disableStorage() {\n  encryptStorage = null;\n}","import * as Crypto from 'crypto-js';\n\nexport class EncryptStorage {\n  constructor(secret, storage) {\n    this.secret = secret;\n    this.storage = storage;\n  }\n\n  encrypt(key, data) {\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    } else if (typeof data === 'number') {\n      data = data.toString();\n    } else if (typeof data !== 'string') {\n      throw new Error('invalid type');\n    }\n    const encryptedData = Crypto.AES.encrypt(data, this.secret);\n    return this.storage.setItem(key, encryptedData.toString());\n  }\n\n  async decrypt(key) {\n    const data = await this.storage.getItem(key);\n    let decryptedData = null;\n    if (data) {\n      decryptedData = (Crypto.AES.decrypt(data, this.secret)).toString(Crypto.enc.Utf8);\n      try {\n        decryptedData = JSON.parse(decryptedData);\n      } catch (e) {}\n    }\n    return decryptedData;\n  }\n\n  remove(key) {\n    return this.storage.removeItem(key);\n  }\n}","import {getItemFromStorage} from './storage';\nimport {isEmpty} from 'lodash';\n\nlet privateKey;\nlet publicKey;\n\nexport async function getPrivateKey() {\n  if (!isEmpty(privateKey)) return privateKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return privateKey = Uint8Array.from(pk.secretKey);\n}\n\nexport async function getPublicKey() {\n  if (!isEmpty(publicKey)) return publicKey;\n  const pk = await getItemFromStorage('key-pair');\n  if (isEmpty(pk)) return;\n  return publicKey = Uint8Array.from(pk.publicKey);\n}","import * as localforage from 'localforage';\nimport {useEffect, useState} from 'react';\n\nexport function useLocalForage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    localforage.getItem(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    localforage.setItem(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {getPublicKey} from '../utils/encryption/keys';\nimport {useEffect, useState} from 'react';\n\nexport function usePublicKey() {\n  const [state, setState] = useState();\n\n  useEffect(() => {\n    getPublicKey().then((publicKey) => {\n      setState(publicKey);\n    });\n  });\n\n  return state;\n}","import {disableStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {useIdle} from 'react-use';\nimport {useLocalForage} from './use-local-forage';\nimport {usePublicKey} from './use-public-key';\n\nexport function useRequireUnlock() {\n  const history = useHistory();\n  const location = useLocation();\n  const publicKey = usePublicKey();\n  const [isPrivateKeyInitialized] = useLocalForage('pk-initialized');\n  const [state, setState] = useState(false);\n  const isIdle = useIdle(120e3);\n\n  useEffect(() => {\n    if (isPrivateKeyInitialized === undefined) return;\n    if (isPrivateKeyInitialized === null) return setState(true);\n\n    if (publicKey) return setState(true);\n\n    setTimeout(() => {\n      history.push(`/unlock?redirectTo=${location.pathname}`);\n    }, 50);\n  }, [isPrivateKeyInitialized, history, publicKey, location, setState, location.pathname]);\n\n  useEffect(() => {\n    if (!publicKey) return;\n    if (!isIdle) return;\n    disableStorage();\n    setTimeout(() => {\n      history.push(`/unlock?redirectTo=${location.pathname}`);\n    }, 50);\n  }, [isIdle, publicKey, history, location.pathname]);\n\n  return state;\n}","import {AddNewContact} from './contacts/add-new-contact';\nimport {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\n\nexport default function ContactsPage({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <div>\n      <div>\n        {children}\n      </div>\n\n      {\n        isUnlocked && <div className=\"w-full md:w-1/3 mx-auto pt-4\">\n          <h1 className=\"text-center text-2xl font-bold\">Contacts</h1>\n\n          <div className=\"flex justify-end\">\n            <AddNewContact/>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}","import {generateKeys} from '../../lib/utils/encryption/generate-keys';\nimport {isEmpty} from 'lodash';\nimport {passwordStrength} from 'check-password-strength';\nimport {setItemInStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {useLocalForage} from '../../lib/hooks/use-local-forage';\nimport {useState} from '@hookstate/core';\nimport Modal from '../utils/modal';\n\nexport default function SetupGeneratePrivateKey({children}) {\n  const [isPrivateKeyInitialized, setIsPrivateKeyInitialized] = useLocalForage('pk-initialized');\n\n  const state = useState({\n    confirmMatch: true,\n    confirmPinValue: '',\n    emailValue: '',\n    nameValue: '',\n    passwordStrength: 'Too weak',\n    pinValue: '',\n    setupPinModal: false,\n  });\n  function openSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: true});\n  }\n\n  function closeSetupPinModal(e) {\n    e.preventDefault();\n    state.merge({setupPinModal: false});\n  }\n\n  function changePinValue(e) {\n    const value = e.target.value;\n    const strength = passwordStrength(value).value;\n    state.merge({\n      passwordStrength: strength,\n      pinValue: e.target.value,\n    });\n  }\n\n  function changeConfirmPinValue(e) {\n    const value = e.target.value;\n\n    state.merge((s) => {\n      return {\n        confirmMatch: value === s.pinValue,\n        confirmPinValue: value,\n      };\n    });\n  }\n\n  function generatePrivateKey(e) {\n    e.preventDefault();\n    const keyPair = generateKeys();\n    setStoragePin(state.pinValue.get());\n    setItemInStorage('key-pair', {\n      publicKey: Array.from(keyPair.publicKey),\n      secretKey: Array.from(keyPair.secretKey),\n    });\n    setItemInStorage('name', state.nameValue.get());\n    setItemInStorage('email', state.emailValue.get());\n    setIsPrivateKeyInitialized(true);\n  }\n\n  const submitDisabled = isEmpty(state.pinValue.get()) || state.passwordStrength.get() === 'Too weak' ||\n    isEmpty(state.confirmPinValue.get()) || !state.confirmMatch.get();\n\n  function changeNameValue(e) {\n    state.merge({nameValue: e.target.value});\n  }\n\n  function changeEmailValue(e) {\n    state.merge({emailValue: e.target.value});\n  }\n\n  if (isPrivateKeyInitialized) return children;\n\n  return (\n    <div>\n      <button onClick={openSetupPinModal}>\n        Get started\n      </button>\n\n      <Modal isOpened={state.setupPinModal.get()} close={closeSetupPinModal}>\n        <form className=\"pure-form pure-form-aligned\" onSubmit={generatePrivateKey}>\n          <fieldset>\n            <legend>PIN setup</legend>\n\n            <div className=\"pure-control-group\">\n              <input name=\"name\" value={state.nameValue.get()} onChange={changeNameValue} placeholder=\"Enter your name\" className=\"w-full\"/>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input type=\"email\" name=\"email\" value={state.emailValue.get()} onChange={changeEmailValue} placeholder=\"Enter email(to have a avatar)\" className=\"w-full\"/>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pin\" value={state.pinValue.get()} onChange={changePinValue} placeholder=\"Enter new PIN\" className=\"w-full\" required/>\n              <span className=\"pure-form-message\">{state.passwordStrength.get()}</span>\n            </div>\n\n            <div className=\"pure-control-group\">\n              <input name=\"pinConfirm\" value={state.confirmPinValue.get()} onChange={changeConfirmPinValue} placeholder=\"Confirm your pin\" className=\"w-full\" required/>\n              {\n                !state.confirmMatch.get() &&\n                  <span className=\"pure-form-message\">Pins don't match</span>\n              }\n            </div>\n\n            <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={submitDisabled}>\n              Submit\n            </button>\n          </fieldset>\n        </form>\n      </Modal>\n    </div>\n  );\n}","import {box} from 'tweetnacl';\n\nexport function generateKeys() {\n  return box.keyPair();\n}","import {getItemFromStorage, setItemInStorage} from '../utils/encryption/storage';\nimport {useEffect, useState} from 'react';\n\nexport function useEncryptedStorage(keyName) {\n  const [state, setState] = useState();\n  useEffect(() => {\n    getItemFromStorage(keyName).then((value) => {\n      setState(value);\n    });\n  }, [setState, keyName]);\n\n  const setStateWrapper = (value) => {\n    setState(value);\n    setItemInStorage(keyName, value);\n  };\n\n  return [state, setStateWrapper];\n}","import {copyToClipboard} from '../../../lib/utils/actions/copy-to-clipboard';\nimport {encodeBase64} from 'tweetnacl-util';\nimport {formatKeyReadable} from '../../../lib/utils/format/keys';\nimport {md5} from '../../../lib/utils/format/md5';\nimport {useEncryptedStorage} from '../../../lib/hooks/use-encrypted-storage';\nimport {usePublicKey} from '../../../lib/hooks/use-public-key';\nimport {useState} from '@hookstate/core';\n\nexport default function ShowSharablePublicKey() {\n  const publicKey = usePublicKey();\n  const readableKey = formatKeyReadable(publicKey);\n  const [name] = useEncryptedStorage('name');\n  const [email] = useEncryptedStorage('email');\n  const encodedName = name ? encodeBase64(name) : '';\n  const encodedEmail = email ? md5(email) : '';\n  const output = `${readableKey}\\\\${encodedName}\\\\${encodedEmail}`;\n  const state = useState({\n    showCopied: false,\n  });\n\n  if (!readableKey) return null;\n\n  function copyPk(e) {\n    e.preventDefault();\n    copyToClipboard(output);\n    state.merge({showCopied: true});\n\n    setTimeout(() => {\n      state.merge({showCopied: false});\n    }, 1500);\n  }\n\n  return (\n    <div className=\"p-3\">\n      <button className=\"text-center bg-gray-300 hover:bg-gray-200 rounded p-2 border border-solid border-gray-300\" onClick={copyPk}>\n        <div className=\"font-bold\">\n          My public key, name and email hashed\n        </div>\n        <div>\n          {output}\n        </div>\n\n        <div className=\"text-right text-sm\">\n          Click to copy\n        </div>\n      </button>\n    </div>\n  );\n}","import {MD5 as cryptoMd5} from 'crypto-js';\n\nexport function md5(str) {\n  return cryptoMd5(str).toString();\n}","import {\n  encodeBase64,\n} from 'tweetnacl-util';\nimport {isEmpty} from 'lodash';\n\nexport function formatKeyReadable(key) {\n  if (isEmpty(key)) return;\n\n  return encodeBase64(key);\n}","export function copyToClipboard(text) {\n  const input = document.createElement('input');\n  input.setAttribute('value', text);\n  document.body.appendChild(input);\n  input.select();\n  const result = document.execCommand('copy');\n  document.body.removeChild(input);\n  return result;\n}","import {useRequireUnlock} from '../../lib/hooks/use-require-unlock';\nimport SetupGeneratePrivateKey from '../setup/generate-private-key';\nimport ShowSharablePublicKey from './home/show-sharable-public-key';\n\nexport default function HomePage({children}) {\n  const isUnlocked = useRequireUnlock();\n\n  return (\n    <>\n      {children}\n\n      {\n        isUnlocked && <SetupGeneratePrivateKey>\n          <div className=\"w-full md:w-1/3 flex justify-center mx-auto\">\n            <ShowSharablePublicKey/>\n          </div>\n        </SetupGeneratePrivateKey>\n      }\n    </>\n  );\n}","export default __webpack_public_path__ + \"static/media/enigma-logo.d8f45653.jpg\";","import {Link} from 'react-router-dom';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function PageNavigation() {\n  return (\n    <>\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n      <div className=\"flex flex-wrap justify-center\">\n        <NavigationItem text=\"Home\" to=\"/\"/>\n        <NavigationItem text=\"Contacts\" to=\"/contacts\"/>\n      </div>\n    </>\n  );\n}\n\nfunction NavigationItem({text, to}) {\n  return (\n    <div className=\"mx-1 text-center bg-black p-2 rounded text-white\">\n      <Link to={to}>{text}</Link>\n    </div>\n  );\n}","import {\n  HashRouter,\n} from 'react-router-dom';\n\nexport default function Router({children}) {\n  return (\n    <HashRouter>\n      {children}\n    </HashRouter>\n  );\n}","import {getItemFromStorage, setStoragePin} from '../../lib/utils/encryption/storage';\nimport {isEmpty} from 'lodash';\nimport {useHistory} from 'react-router-dom';\nimport {useQueryParams} from '../../lib/hooks/use-query-params';\nimport {useState} from '@hookstate/core';\nimport logo from '../../assets/enigma-logo.jpg';\n\nexport default function UnlockPage() {\n  const state = useState({pinValue: '', showError: false});\n  const history = useHistory();\n  const queryParams = useQueryParams();\n\n  async function unlock(e) {\n    e.preventDefault();\n    const redirectTo = queryParams.get('redirectTo');\n    setStoragePin(state.pinValue.get());\n\n    try {\n      const privateKey = await getItemFromStorage('key-pair');\n      if (isEmpty(privateKey)) {\n        return state.merge({\n          pinValue: '',\n          showError: true,\n        });\n      }\n\n      state.merge({\n        pinValue: '',\n        showError: false,\n      });\n\n      setTimeout(() => {\n        history.push(redirectTo);\n      }, 50);\n    } catch (e) {\n      return state.merge({\n        pinValue: '',\n        showError: true,\n      });\n    }\n  }\n\n  function updatePinValue(e) {\n    const {value} = e.target;\n    state.merge({pinValue: value});\n  }\n\n  return (\n    <div className=\"w-full md:w-1/3 mx-auto\">\n      <div className=\"flex justify-center\">\n        <img src={logo} alt=\"enigma\"/>\n      </div>\n\n      <form className=\"pure-form\" onSubmit={unlock}>\n        <fieldset>\n\n          <div className=\"pure-control-group pb-4\">\n            <input type=\"password\" value={state.pinValue.get()} onChange={updatePinValue} className=\"w-full\" placeholder=\"Enter your PIN to continue\"/>\n            {\n              state.showError.get() && <span className=\"pure-form-message text-red-500\">Invalid PIN</span>\n            }\n          </div>\n\n          <button type=\"submit\" className=\"pure-button pure-button-primary w-full\" disabled={isEmpty(state.pinValue.get())}>\n            Unlock\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}","import {\n  useLocation,\n} from 'react-router-dom';\n\nexport function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}","import {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport AppLayout from './components/page/layout';\nimport ContactsPage from './components/pages/contacts';\nimport HomePage from './components/pages/home';\nimport PageNavigation from './components/page/navigation';\nimport Router from './components/config/router';\nimport UnlockPage from './components/pages/unlock';\n\nexport default function App() {\n  return (\n    <Router>\n      <AppLayout>\n        <Switch>\n          <Route path=\"/\" exact>\n            <HomePage>\n              <PageNavigation/>\n            </HomePage>\n          </Route>\n\n          <Route path=\"/unlock\">\n            <UnlockPage/>\n          </Route>\n\n          <Route path=\"/contacts\">\n            <ContactsPage>\n              <PageNavigation/>\n            </ContactsPage>\n          </Route>\n\n          <Route path=\"*\">\n          </Route>\n        </Switch>\n      </AppLayout>\n    </Router>\n  );\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport './tailwind.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}